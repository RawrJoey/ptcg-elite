{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/attach-tool-tactic.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/attach-tool-tactic.ts"],"names":[],"mappings":";;;AAAA,qCAC4C;AAC5C,qDAAgD;AAEhD,MAAa,gBAAiB,SAAQ,6BAAY;IAEzC,SAAS,CAAC,KAAY,EAAE,MAAc;QAC3C,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACzC,OAAO,CAAC,YAAY,kBAAW,IAAI,CAAC,CAAC,WAAW,KAAK,kBAAW,CAAC,IAAI,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO;SACR;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;QAEvD,MAAM,OAAO,GAA4C,EAAE,CAAC;QAC5D,MAAM,CAAC,cAAc,CAAC,iBAAU,CAAC,aAAa,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YAC5E,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC/B,OAAO;aACR;YAED,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;YACnD,QAAQ,CAAC,IAAI,GAAG,SAAS,CAAC;YAE1B,IAAI,KAAK,GAAG,SAAS,EAAE;gBACrB,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;aACjC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,OAAO;SACR;QAED,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACjC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,OAAO,IAAI,qBAAc,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACtD,CAAC;CAEF;AAvCD,4CAuCC","sourcesContent":["import { Action, Player, State, PlayCardAction, TrainerCard, TrainerType,\n  CardTarget, PlayerType} from '../../game';\nimport { SimpleTactic } from './simple-tactics';\n\nexport class AttachToolTactic extends SimpleTactic {\n\n  public useTactic(state: State, player: Player): Action | undefined {\n    const tools = player.hand.cards.filter(c => {\n      return c instanceof TrainerCard && c.trainerType === TrainerType.TOOL;\n    });\n\n    if (tools.length === 0) {\n      return;\n    }\n\n    const tool = tools[0];\n    const baseScore = this.getStateScore(state, player.id);\n\n    const targets: { target: CardTarget, score: number }[] = [];\n    player.forEachPokemon(PlayerType.BOTTOM_PLAYER, (cardList, pokemon, target) => {\n      if (cardList.tool !== undefined) {\n        return;\n      }\n\n      cardList.tool = tool;\n      const score = this.getStateScore(state, player.id);\n      cardList.tool = undefined;\n\n      if (score > baseScore) {\n        targets.push({ target, score });\n      }\n    });\n\n    if (targets.length === 0) {\n      return;\n    }\n\n    targets.sort((a, b) => b.score - a.score);\n    const target = targets[0].target;\n    const index = player.hand.cards.indexOf(tools[0]);\n    return new PlayCardAction(player.id, index, target); \n  }\n\n}\n"]}