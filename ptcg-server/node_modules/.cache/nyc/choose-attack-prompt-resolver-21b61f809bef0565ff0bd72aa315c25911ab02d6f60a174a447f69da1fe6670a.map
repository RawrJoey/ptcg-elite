{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-attack-prompt-resolver.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-attack-prompt-resolver.ts"],"names":[],"mappings":";;;AAAA,qCAAkG;AAClG,uDAAmD;AACnD,wFAAmF;AAGnF,MAAa,0BAA2B,SAAQ,gCAAc;IAErD,aAAa,CAAC,KAAY,EAAE,MAAc,EAAE,MAAmB;QACpE,IAAI,MAAM,YAAY,yCAAkB,EAAE;YACxC,MAAM,MAAM,GAAkB,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACtE,OAAO,IAAI,0BAAmB,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;SACnD;IACH,CAAC;IAEO,mBAAmB,CAAC,KAAY,EAAE,MAA0B;QAClE,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,kEAAkE;QAClE,uDAAuD;QACvD,MAAM,MAAM,GAAa,KAAK,CAAC,KAAK,KAAK,gBAAS,CAAC,MAAM;YACvD,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YACnC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC5B,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBAChD,OAAO,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC;gBACvD,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;oBAC/C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACtB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACpB,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;gBACzB,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;aAC5B;YACD,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAChD,CAAC;CAEF;AAtCD,gEAsCC","sourcesContent":["import { Player, State, Action, ResolvePromptAction, Prompt, Attack, GamePhase} from '../../game';\nimport { PromptResolver } from './prompt-resolver';\nimport { ChooseAttackPrompt } from '../../game/store/prompts/choose-attack-prompt';\n\n\nexport class ChooseAttackPromptResolver extends PromptResolver {\n\n  public resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action | undefined {\n    if (prompt instanceof ChooseAttackPrompt) {\n      const result: Attack | null = this.buildAttackToChoose(state, prompt);\n      return new ResolvePromptAction(prompt.id, result);\n    }\n  }\n\n  private buildAttackToChoose(state: State, prompt: ChooseAttackPrompt): Attack | null {\n    const attacks: Attack[] = [];\n\n    // Foul Play is banned, because when Zoroark meet's another Zoroak\n    // they would copy theirs attacks in the infinite loop.\n    const banned: string[] = state.phase === GamePhase.ATTACK\n      ? ['Foul Play'] : [];\n\n    prompt.cards.forEach((card, index) => {\n      card.attacks.forEach(attack => {\n        const isBlocked = prompt.options.blocked.some(b => {\n          return b.index === index && b.attack === attack.name;\n        });\n        if (!isBlocked && !banned.includes(attack.name)) {\n          attacks.push(attack);\n        }\n      });\n    });\n\n    attacks.sort((a, b) => {\n      if (a.damage !== b.damage) {\n        return b.damage - a.damage;\n      }\n      return b.cost.length - a.cost.length;\n    });\n\n    return attacks.length > 0 ? attacks[0] : null;\n  }\n\n}\n"]}