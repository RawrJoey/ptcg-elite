{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-energy-prompt.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-energy-prompt.ts"],"names":[],"mappings":"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","sourcesContent":["import { Card } from '../card/card';\nimport { CardType } from '../card/card-types';\nimport { GameMessage } from '../../game-message';\nimport { Prompt } from './prompt';\nimport { StateUtils } from '../state-utils';\n\nexport const ChooseEnergyPromptType = 'Choose energy';\n\nexport interface ChooseEnergyOptions {\n  allowCancel: boolean;\n}\n\nexport type EnergyMap = { card: Card, provides: CardType[] }\n\nexport class ChooseEnergyPrompt extends Prompt<EnergyMap[]> {\n\n  readonly type: string = ChooseEnergyPromptType;\n\n  public options: ChooseEnergyOptions;\n\n  constructor(\n    playerId: number,\n    public message: GameMessage,\n    public energy: EnergyMap[],\n    public cost: CardType[],\n    options?: Partial<ChooseEnergyOptions>\n  ) {\n    super(playerId);\n\n    // Default options\n    this.options = Object.assign({}, {\n      allowCancel: true\n    }, options);\n\n    if (this.options.allowCancel === false) {\n      this.cost = this.getCostThatCanBePaid();\n    }\n  }\n\n  public decode(result: number[] | null): EnergyMap[] | null {\n    if (result === null) {\n      return null;\n    }\n    const energy: EnergyMap[] = this.energy;\n    return result.map(index => energy[index]);\n  }\n\n  public validate(result: EnergyMap[] | null): boolean {\n    if (result === null) {\n      return this.options.allowCancel;\n    }\n    if (!StateUtils.checkExactEnergy(result, this.cost)) {\n      return false;\n    }\n    return true;\n  }\n\n  private getCostThatCanBePaid(): CardType[] {\n    const result: CardType[] = this.cost.slice();\n    const provides = this.energy.slice();\n    const costs: CardType[] = this.cost.filter(c => c !== CardType.COLORLESS);\n    const colorlessCount = result.length - costs.length;\n\n    while (costs.length > 0 && provides.length > 0) {\n      const cost = costs[0];\n      let index = provides.findIndex(p => p.provides.includes(cost));\n\n      if (index === -1) {\n        // concrete energy not found, try to use rainbow energies\n        index = provides.findIndex(p => p.provides.includes(CardType.ANY));\n      }\n\n      if (index !== -1) {\n        // Energy can be paid, so remove that energy from the provides\n        const provide = provides[index];\n        provides.splice(index, 1);\n\n        provide.provides.forEach(c => {\n          if (c === CardType.ANY && costs.length > 0) {\n            costs.shift();\n          } else {\n            const i = costs.indexOf(c);\n            if (i !== -1) {\n              costs.splice(i, 1);\n            }\n          }\n        });\n\n      } else {\n        // Impossible to pay for this cost\n        costs.shift();\n        const costToDelete = result.indexOf(cost);\n        if (costToDelete !== -1) {\n          result.splice(costToDelete, 1);\n        }\n      }\n    }\n\n    let energyLeft = 0;\n    for (const energy of provides) {\n      energyLeft += energy.provides.length;\n    }\n\n    const colorlessToDelete = Math.max(0, colorlessCount - energyLeft);\n    for (let i = 0; i < colorlessToDelete; i++) {\n      const costToDelete = result.indexOf(CardType.COLORLESS);\n      if (costToDelete !== -1) {\n        result.splice(costToDelete, 1);\n      }\n    }\n\n    return result;\n  }\n\n}\n"]}