{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-pokemon-prompt-resolver.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-pokemon-prompt-resolver.ts"],"names":[],"mappings":"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","sourcesContent":["import { Player, State, Action, ResolvePromptAction, Prompt, PokemonCardList,\n  PlayerType, SlotType, StateUtils, GameMessage } from '../../game';\nimport { PromptResolver } from './prompt-resolver';\nimport { ChoosePokemonPrompt } from '../../game/store/prompts/choose-pokemon-prompt';\n\ninterface PlayerCardList {\n  cardList: PokemonCardList;\n  player: PlayerType;\n}\n\nexport class ChoosePokemonPromptResolver extends PromptResolver {\n\n  public resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action | undefined {\n    if (prompt instanceof ChoosePokemonPrompt) {\n      const items = this.buildPokemonToChoose(state, prompt);\n      const result = this.getPromptResult(prompt, items);\n      return new ResolvePromptAction(prompt.id, result);\n    }\n  }\n\n  private getPromptResult(prompt: ChoosePokemonPrompt, pokemons: PlayerCardList[]): PokemonCardList[] | null {\n    const items = pokemons.map(item => {\n      const score = this.getPokemonScoreForPrompt(prompt, item);\n      return { cardList: item.cardList, score };\n    });\n    items.sort((a, b) => b.score - a.score);\n\n    const result: PokemonCardList[] = [];\n    const min = prompt.options.min;\n    const max = prompt.options.max;\n    let score = 0;\n\n    while (items.length > 0 && (items[0].score > 0 || result.length < min)) {\n      const item = items.shift();\n      if (item === undefined) {\n        break;\n      }\n      result.push(item.cardList);\n      score += item.score;\n\n      if (result.length >= max) {\n        break;\n      }\n    }\n\n    if (result.length === 0 && prompt.options.allowCancel) {\n      return null;\n    }\n\n    if (score < 0 && prompt.options.allowCancel) {\n      return null;\n    }\n\n    return result;\n  }\n\n  private getPokemonScoreForPrompt(prompt: ChoosePokemonPrompt, item: PlayerCardList): number {\n    let score = this.stateScore.getPokemonScore(item.cardList);\n\n    if (item.player === PlayerType.TOP_PLAYER) {\n      score = -score;\n    }\n\n    // reverse messages\n    const weakestMessages: GameMessage[] = [\n      GameMessage.CHOOSE_POKEMON_TO_DAMAGE,\n      GameMessage.CHOOSE_POKEMON_TO_DISCARD,\n      GameMessage.CHOOSE_POKEMON_TO_DISCARD_CARDS,\n      GameMessage.CHOOSE_POKEMON_TO_PICK_UP\n    ];\n\n    if (weakestMessages.includes(prompt.message)) {\n      score = -score;\n    }\n\n    return score;\n  }\n\n  private buildPokemonToChoose(state: State, prompt: ChoosePokemonPrompt): PlayerCardList[] {\n    const player = state.players.find(p => p.id === prompt.playerId);\n    const opponent = state.players.find(p => p.id !== prompt.playerId);\n    if (player === undefined || opponent === undefined) {\n      return [];\n    }\n    const hasOpponent = [PlayerType.TOP_PLAYER, PlayerType.ANY].includes(prompt.playerType);\n    const hasPlayer = [PlayerType.BOTTOM_PLAYER, PlayerType.ANY].includes(prompt.playerType);\n    const hasBench = prompt.slots.includes(SlotType.BENCH);\n    const hasActive = prompt.slots.includes(SlotType.ACTIVE);\n\n    let result: PlayerCardList[] = [];\n    if (hasOpponent && hasBench) {\n      opponent.bench.filter(b => b.cards.length).forEach(b => {\n        result.push({ cardList: b, player: PlayerType.TOP_PLAYER });\n      });\n    }\n    if (hasOpponent && hasActive) {\n      result.push({ cardList: opponent.active, player: PlayerType.TOP_PLAYER });\n    }\n    if (hasPlayer && hasActive) {\n      result.push({ cardList: player.active, player: PlayerType.BOTTOM_PLAYER });\n    }\n    if (hasPlayer && hasBench) {\n      player.bench.filter(b => b.cards.length).forEach(b => {\n        result.push({ cardList: b, player: PlayerType.BOTTOM_PLAYER });\n      });\n    }\n\n    const blocked = prompt.options.blocked.map(b => StateUtils.getTarget(state, player, b));\n    result = result.filter(r => !blocked.includes(r.cardList));\n    return result;\n  }\n\n}\n"]}