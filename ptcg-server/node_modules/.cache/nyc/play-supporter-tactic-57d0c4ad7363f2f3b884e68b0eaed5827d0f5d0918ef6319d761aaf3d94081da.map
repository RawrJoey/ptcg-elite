{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/play-supporter-tactic.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/play-supporter-tactic.ts"],"names":[],"mappings":";;;AAAA,qCAC2C;AAC3C,qDAAgD;AAEhD,MAAa,mBAAoB,SAAQ,6BAAY;IAE5C,SAAS,CAAC,KAAY,EAAE,MAAc;QAC3C,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACrC,OAAO;SACR;QAED,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YAC9C,OAAO,CAAC,YAAY,kBAAW,IAAI,CAAC,CAAC,WAAW,KAAK,kBAAW,CAAC,SAAS,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO;SACR;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC;QAClE,MAAM,MAAM,GAAG,EAAE,MAAM,EAAE,iBAAU,CAAC,GAAG,EAAE,IAAI,EAAE,eAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC1E,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC;QACtE,IAAI,cAA0C,CAAC;QAE/C,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,IAAI,qBAAc,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAC5D,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAE5D,IAAI,KAAK,KAAK,SAAS,IAAI,SAAS,GAAG,KAAK,EAAE;gBAC5C,SAAS,GAAG,KAAK,CAAC;gBAClB,cAAc,GAAG,MAAM,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,cAAc,CAAC;IACxB,CAAC;CAEF;AAlCD,kDAkCC","sourcesContent":["import { Action, Player, State, TrainerCard, TrainerType, PlayCardAction,\n  PlayerType, SlotType } from '../../game';\nimport { SimpleTactic } from './simple-tactics';\n\nexport class PlaySupporterTactic extends SimpleTactic {\n\n  public useTactic(state: State, player: Player): Action | undefined {\n    if (player.supporter.cards.length > 0) {\n      return;\n    }\n\n    const supporters = player.hand.cards.filter(c => {\n      return c instanceof TrainerCard && c.trainerType === TrainerType.SUPPORTER;\n    });\n\n    if (supporters.length === 0) {\n      return;\n    }\n\n    const supporterBonus = this.options.scores.tactics.supporterBonus;\n    const target = { player: PlayerType.ANY, slot: SlotType.BOARD, index: 0 };\n    let bestScore = this.getStateScore(state, player.id) - supporterBonus;\n    let playCardAction: PlayCardAction | undefined;\n\n    supporters.forEach(card => {\n      const index = player.hand.cards.indexOf(card);\n      const action = new PlayCardAction(player.id, index, target);\n      const score = this.evaluateAction(state, player.id, action);\n\n      if (score !== undefined && bestScore < score) {\n        bestScore = score;\n        playCardAction = action;\n      }\n    });\n\n    return playCardAction;\n  }\n\n}\n"]}