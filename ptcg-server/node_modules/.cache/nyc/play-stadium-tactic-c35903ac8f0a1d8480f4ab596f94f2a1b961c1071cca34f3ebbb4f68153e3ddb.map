{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/play-stadium-tactic.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/play-stadium-tactic.ts"],"names":[],"mappings":";;;AAAA,qCACuD;AACvD,qDAAgD;AAEhD,MAAa,iBAAkB,SAAQ,6BAAY;IAE1C,SAAS,CAAC,KAAY,EAAE,MAAc;QAC3C,uCAAuC;QACvC,IAAI,MAAM,CAAC,iBAAiB,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7E,OAAO;SACR;QAED,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YAC1C,OAAO,CAAC,YAAY,kBAAW,IAAI,CAAC,CAAC,WAAW,KAAK,kBAAW,CAAC,OAAO,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,0DAA0D;QAC1D,MAAM,cAAc,GAAG,iBAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,cAAc,EAAE;YAClB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,cAAc,CAAC,QAAQ,CAAC,CAAC;SACzE;QAED,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,OAAO;SACR;QAED,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,EAAE,MAAM,EAAE,iBAAU,CAAC,GAAG,EAAE,IAAI,EAAE,eAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC1E,OAAO,IAAI,qBAAc,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACtD,CAAC;CAEF;AA3BD,8CA2BC","sourcesContent":["import { Action, Player, State, TrainerCard, TrainerType, PlayCardAction,\n  PlayerType, SlotType, StateUtils } from '../../game';\nimport { SimpleTactic } from './simple-tactics';\n\nexport class PlayStadiumTactic extends SimpleTactic {\n\n  public useTactic(state: State, player: Player): Action | undefined {\n    // Don't discard your own stadium cards\n    if (player.stadiumPlayedTurn >= state.turn || player.stadium.cards.length > 0) {\n      return;\n    }\n\n    let stadiums = player.hand.cards.filter(c => {\n      return c instanceof TrainerCard && c.trainerType === TrainerType.STADIUM;\n    });\n\n    // Don't play stadiums of the same name as current stadium\n    const currentStadium = StateUtils.getStadiumCard(state);\n    if (currentStadium) {\n      stadiums = stadiums.filter(c => c.fullName !== currentStadium.fullName);\n    }\n\n    if (stadiums.length === 0) {\n      return;\n    }\n\n    const index = player.hand.cards.indexOf(stadiums[0]);\n    const target = { player: PlayerType.ANY, slot: SlotType.BOARD, index: 0 };\n    return new PlayCardAction(player.id, index, target);\n  }\n\n}\n"]}