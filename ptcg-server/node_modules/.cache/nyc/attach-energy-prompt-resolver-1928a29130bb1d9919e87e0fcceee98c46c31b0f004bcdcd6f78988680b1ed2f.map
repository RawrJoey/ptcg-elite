{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/attach-energy-prompt-resolver.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/attach-energy-prompt-resolver.ts"],"names":[],"mappings":"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","sourcesContent":["import { AttachEnergyPrompt, CardAssign } from '../../game/store/prompts/attach-energy-prompt';\nimport { Player, State, Action, ResolvePromptAction, Prompt, StateUtils,\n  PokemonCardList, PlayerType, CardList, Card, CardTarget } from '../../game';\nimport { PromptResolver } from './prompt-resolver';\nimport { deepClone } from '../../utils/utils';\n\ninterface ResultItem {\n  value: CardAssign[] | null;\n  score: number;\n}\n\nexport class AttachEnergyPromptResolver extends PromptResolver {\n\n  public resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action | undefined {\n    if (prompt instanceof AttachEnergyPrompt) {\n      const result = this.getPromptResult(state, prompt);\n      return new ResolvePromptAction(prompt.id, result);\n    }\n  }\n\n  private getPromptResult(state: State, prompt: AttachEnergyPrompt): CardAssign[] | null {\n    const copy = deepClone(state, [ Card ]);\n\n    const results: ResultItem[] = [];\n    const baseScore = this.getStateScore(state, prompt.playerId);\n\n    if (prompt.options.allowCancel) {\n      results.push({ value: null, score: baseScore });\n    }\n\n    if (prompt.options.min === 0) {\n      results.push({ value: [], score: baseScore });\n    }\n\n    const cardList = this.buildCardsToChoose(copy, prompt);\n    const cards = cardList.cards.slice();\n    let value: CardAssign[] = [];\n\n    for (let i = 0; i < cards.length && i < prompt.options.max; i++) {\n      const result = this.assignToBestTarget(copy, prompt, cardList, cards[i]);\n      if (result === undefined || result.value === null) {\n        break;\n      }\n      value =  [ ...value, result.value[0] ];\n      results.push({ value, score: result.score });\n    }\n\n    results.sort((a, b) => b.score - a.score);\n    return results.length > 0 ? results[0].value : null;\n  }\n\n  private buildCardsToChoose(state: State, prompt: AttachEnergyPrompt): CardList {\n    const cardList = new CardList();\n\n    cardList.cards = prompt.cardList.cards.filter((card, index) => {\n      return !prompt.options.blocked.includes(index);\n    });\n\n    cardList.cards = cardList.filter(prompt.filter);\n    return cardList;\n  }\n\n  private assignToBestTarget(state: State, prompt: AttachEnergyPrompt, cardList: CardList, card: Card): ResultItem | undefined {\n    const player = state.players.find(p => p.id === prompt.playerId);\n    const opponent = state.players.find(p => p.id !== prompt.playerId);\n    if (player === undefined || opponent === undefined) {\n      return;\n    }\n    const hasOpponent = [PlayerType.TOP_PLAYER, PlayerType.ANY].includes(prompt.playerType);\n    const hasPlayer = [PlayerType.BOTTOM_PLAYER, PlayerType.ANY].includes(prompt.playerType);\n\n    let results: {target: CardTarget, cardList: PokemonCardList, score: number}[] = [];\n    if (hasOpponent) {\n      opponent.forEachPokemon(PlayerType.TOP_PLAYER, (cardList, card, target) => {\n        if (prompt.slots.includes(target.slot)) {\n          results.push({ target, cardList, score: 0 });\n        }\n      });\n    }\n    if (hasPlayer) {\n      player.forEachPokemon(PlayerType.BOTTOM_PLAYER, (cardList, card, target) => {\n        if (prompt.slots.includes(target.slot)) {\n          results.push({ target, cardList, score: 0 });\n        }\n      });\n    }\n\n    const blocked = prompt.options.blockedTo.map(b => StateUtils.getTarget(state, player, b));\n    results = results.filter(i => !blocked.includes(i.cardList));\n\n    if (results.length === 0) {\n      return;\n    }\n\n    // evaluate results\n    for (const result of results) {\n      cardList.moveCardTo(card, result.cardList);\n      result.score = this.getStateScore(state, player.id);\n      result.cardList.moveCardTo(card, cardList);\n    }\n\n    results.sort((a, b) => b.score - a.score);\n\n    const result = results[0];\n    cardList.moveCardTo(card, result.cardList);\n\n    return { value: [{ to: result.target, card }], score: result.score };\n  }\n\n}\n"]}