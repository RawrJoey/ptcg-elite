{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/bots/bot-arbiter.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/bots/bot-arbiter.ts"],"names":[],"mappings":"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","sourcesContent":["import { CardList } from '../store/state/card-list';\nimport { CoinFlipPrompt } from '../store/prompts/coin-flip-prompt';\nimport { Prompt } from '../store/prompts/prompt';\nimport { ShuffleDeckPrompt } from '../store/prompts/shuffle-prompt';\nimport { State } from '../store/state/state';\nimport { ResolvePromptAction } from '../store/actions/resolve-prompt-action';\n\nexport enum BotFlipMode {\n  ALL_HEADS,\n  ALL_TAILS,\n  RANDOM\n}\n\nexport enum BotShuffleMode {\n  NO_SHUFFLE,\n  REVERSE,\n  RANDOM\n}\n\nexport interface BotArbiterOptions {\n  flipMode: BotFlipMode,\n  shuffleMode: BotShuffleMode\n}\n\nexport class BotArbiter {\n\n  private options: BotArbiterOptions;\n  private flipCount: number = 0;\n\n  constructor(options: Partial<BotArbiterOptions> = {}) {\n    this.options = Object.assign({\n      flipMode: BotFlipMode.ALL_HEADS,\n      shuffleMode: BotShuffleMode.NO_SHUFFLE\n    }, options);\n  }\n\n  public resolvePrompt(state: State, prompt: Prompt<any>): ResolvePromptAction | undefined {\n    const player = state.players.find(p => p.id === prompt.playerId);\n\n    if (player === undefined) {\n      return;\n    }\n\n    if (prompt instanceof ShuffleDeckPrompt) {\n      let result: number[] = [];\n      switch (this.options.shuffleMode) {\n        case BotShuffleMode.RANDOM:\n          result = this.shuffle(player.deck);\n          return new ResolvePromptAction(prompt.id, result);\n        case BotShuffleMode.REVERSE:\n          for (let i = player.deck.cards.length - 1; i >= 0; i--) {\n            result.push(i);\n          }\n          return new ResolvePromptAction(prompt.id, result);\n        default:\n          for (let i = 0; i < player.deck.cards.length; i++) {\n            result.push(i);\n          }\n          return new ResolvePromptAction(prompt.id, result);\n      }\n    }\n\n    if (prompt instanceof CoinFlipPrompt) {\n      this.flipCount += 1;\n      let result: boolean = false;\n      switch (this.options.flipMode) {\n        case BotFlipMode.RANDOM:\n          result = Math.round(Math.random()) === 0;\n          return new ResolvePromptAction(prompt.id, result);\n        case BotFlipMode.ALL_TAILS:\n          // Every 10th coin is opposite to avoid infinite loops.\n          result = (this.flipCount % 10 === 9) ? true : false;\n          return new ResolvePromptAction(prompt.id, result);\n        default:\n          result = (this.flipCount % 10 === 9) ? false : true;\n          return new ResolvePromptAction(prompt.id, result);\n      }\n    }\n  }\n\n  private shuffle(cards: CardList): number[] {\n    const len = cards.cards.length;\n    const order: number[] = [];\n\n    for (let i = 0; i < len; i++) {\n      order.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      const position = Math.min(len - 1, Math.round(Math.random() * len));\n      const tmp = order[i];\n      order[i] = order[position];\n      order[position] = tmp;\n    }\n\n    return order;\n  }\n\n}\n"]}