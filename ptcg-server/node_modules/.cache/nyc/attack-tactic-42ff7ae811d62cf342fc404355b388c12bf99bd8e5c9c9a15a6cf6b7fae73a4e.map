{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/attack-tactic.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/attack-tactic.ts"],"names":[],"mappings":";;;AAAA,qCAAmF;AACnF,qDAAgD;AAEhD,MAAa,YAAa,SAAQ,6BAAY;IAErC,SAAS,CAAC,KAAY,EAAE,MAAc;QAC3C,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC;QAC3C,IAAI,EAAE,CAAC,QAAQ,CAAC,uBAAgB,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,uBAAgB,CAAC,MAAM,CAAC,EAAE;YACnF,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QAC9C,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC;QAC5D,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;QACnE,IAAI,YAAsC,CAAC;QAE3C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC9B,MAAM,MAAM,GAAG,IAAI,mBAAY,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YACxD,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAE5D,IAAI,KAAK,KAAK,SAAS,IAAI,SAAS,GAAG,KAAK,EAAE;gBAC5C,SAAS,GAAG,KAAK,CAAC;gBAClB,YAAY,GAAG,MAAM,CAAC;aACvB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;CAEF;AA9BD,oCA8BC","sourcesContent":["import { Action, Player, State, SpecialCondition, AttackAction } from '../../game';\nimport { SimpleTactic } from './simple-tactics';\n\nexport class AttackTactic extends SimpleTactic {\n\n  public useTactic(state: State, player: Player): Action | undefined {\n    const sp = player.active.specialConditions;\n    if (sp.includes(SpecialCondition.PARALYZED) || sp.includes(SpecialCondition.ASLEEP)) {\n      return undefined;\n    }\n\n    const active = player.active.getPokemonCard();\n    if (!active) {\n      return undefined;\n    }\n\n    const attackBonus = this.options.scores.tactics.attackBonus;\n    let bestScore = this.getStateScore(state, player.id) - attackBonus;\n    let attackAction: AttackAction | undefined;\n\n    active.attacks.forEach(attack => {\n      const action = new AttackAction(player.id, attack.name);\n      const score = this.evaluateAction(state, player.id, action);\n\n      if (score !== undefined && bestScore < score) {\n        bestScore = score;\n        attackAction = action;\n      }\n    });\n\n    return attackAction;\n  }\n\n}\n"]}