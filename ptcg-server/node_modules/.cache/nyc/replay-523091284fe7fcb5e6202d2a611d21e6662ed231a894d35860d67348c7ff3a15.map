{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/core/replay.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/core/replay.ts"],"names":[],"mappings":"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","sourcesContent":["import { gzip, ungzip } from '@progress/pako-esm';\n\nimport { State, GameWinner } from '../store/state/state';\nimport { ReplayPlayer, ReplayOptions } from './replay.interface';\nimport { GameError } from '../game-error';\nimport { GameCoreError } from '../game-message';\nimport { SerializedState } from '../serializer/serializer.interface';\nimport { StateSerializer } from '../serializer/state-serializer';\n\nexport class Replay {\n\n  private readonly indexJumpSize: number = 16;\n\n  public player1: ReplayPlayer;\n  public player2: ReplayPlayer;\n  public winner: GameWinner;\n  public created: number;\n  private turnMap: number[] = [];\n  private diffs: SerializedState[] = [];\n  private indexes: SerializedState[] = [];\n  private prevState: SerializedState | undefined;\n  private serializer = new StateSerializer();\n  private options: ReplayOptions;\n\n  constructor(options: Partial<ReplayOptions> = {}) {\n    this.player1 = { name: '', userId: 0, ranking: 0 };\n    this.player2 = { name: '', userId: 0, ranking: 0 };\n    this.winner = GameWinner.NONE;\n    this.created = 0;\n    this.options = Object.assign({\n      indexEnabled: true,\n      appendEnabled: false\n    }, options);\n  }\n\n  public getStateCount(): number {\n    return this.diffs.length;\n  }\n\n  public getState(position: number): State {\n    if (position < 0 || position >= this.diffs.length) {\n      throw new GameError(GameCoreError.ERROR_INVALID_STATE);\n    }\n\n    let stateData = this.diffs[0];\n    const jumps = this.indexJumps(position);\n    let i = 0;\n    while (i !== position) {\n      if (this.options.indexEnabled && jumps.length > 0) {\n        const jump = jumps.shift() || 0;\n        const index = this.indexes[(jump / this.indexJumpSize) - 1];\n        stateData = this.serializer.applyDiff(stateData, index);\n        i = jump;\n      } else {\n        i++;\n        stateData = this.serializer.applyDiff(stateData, this.diffs[i]);\n      }\n    }\n\n    return this.serializer.deserialize(stateData);\n  }\n\n  public getTurnCount(): number {\n    return this.turnMap.length;\n  }\n\n  public getTurnPosition(turn: number): number {\n    if (turn < 0 || turn >= this.turnMap.length) {\n      throw new GameError(GameCoreError.ERROR_INVALID_STATE);\n    }\n    return this.turnMap[turn];\n  }\n\n  public setCreated(created: number): void {\n    this.created = created;\n  }\n\n  public appendState(state: State): void {\n    const full = this.serializer.serialize(state);\n    const diff = this.serializer.serializeDiff(this.prevState, state);\n\n    // Ignore the actions, which does not modified the state, like\n    // shuffling an empty deck, or changing the hand order in the same matter\n    if (diff === '[[]]') {\n      return;\n    }\n\n    this.prevState = full;\n    this.diffs.push(diff);\n    if (this.options.indexEnabled) {\n      this.rebuildIndex(this.diffs);\n    }\n    while (this.turnMap.length <= state.turn) {\n      this.turnMap.push(this.diffs.length - 1);\n    }\n  }\n\n  public serialize(): string {\n    const json = {\n      player1: this.player1,\n      player2: this.player2,\n      winner: this.winner,\n      created: this.created,\n      turnMap: this.turnMap,\n      states: this.swapQuotes(this.diffs)\n    };\n    return this.compress(JSON.stringify(json));\n  }\n\n  public deserialize(replayData: string): void {\n    try {\n      const data = JSON.parse(this.decompress(replayData));\n      this.player1 = data.player1;\n      this.player2 = data.player2;\n      this.winner = data.winner;\n      this.created = data.created;\n      this.diffs = this.swapQuotes(data.states);\n      this.turnMap = data.turnMap;\n\n      if (this.options.indexEnabled) {\n        this.rebuildIndex(this.diffs);\n      }\n\n      if (this.options.appendEnabled) {\n        const lastState = this.getState(this.diffs.length - 1);\n        this.prevState = this.serializer.serialize(lastState);\n      }\n    } catch (error) {\n      throw new GameError(GameCoreError.ERROR_INVALID_STATE);\n    }\n  }\n\n  private swapQuotes(diffs: SerializedState[]): SerializedState[] {\n    return diffs.map(diff => diff.replace(/[\"']/g, c => c === '\"' ? '\\'' : '\"'));\n  }\n\n  private compress(data: string): string {\n    const compressed = gzip(data, { to: 'string' });\n    return compressed;\n  }\n\n  private decompress(data: string): string {\n    const text = ungzip(data, { to: 'string' });\n    return text;\n  }\n\n  private rebuildIndex(diffs: SerializedState[]): void {\n    if (diffs.length === 0) {\n      this.indexes = [];\n      return;\n    }\n\n    this.indexes = [];\n    let i = this.indexJumpSize;\n    while (i < diffs.length) {\n      const jumps = this.indexJumps(i);\n      let stateData = diffs[0];\n      let pos = 0;\n      for (let j = 0; j < jumps.length - 1; j++) {\n        pos = jumps[j];\n        const index = this.indexes[(pos / this.indexJumpSize) - 1];\n        stateData = this.serializer.applyDiff(stateData, index);\n      }\n      let indexData = stateData;\n      while (pos < i) {\n        pos++;\n        indexData = this.serializer.applyDiff(indexData, diffs[pos]);\n      }\n      const indexState = this.serializer.deserialize(indexData);\n      const indexDiff = this.serializer.serializeDiff(stateData, indexState);\n      this.indexes.push(indexDiff);\n      i += this.indexJumpSize;\n    }\n  }\n\n  private indexJumps(position: number): number[] {\n    if (position < this.indexJumpSize) {\n      return [];\n    }\n    const jumps = [ this.indexJumpSize ];\n\n    if (position < this.indexJumpSize * 2) {\n      return jumps;\n    }\n\n    const n = Math.floor(Math.log2(position));\n    let jumpSize = Math.pow(2, n);\n    let pos = 0;\n\n    while (jumpSize >= this.indexJumpSize) {\n      if (pos + jumpSize <= position) {\n        jumps.push(pos + jumpSize);\n        pos += jumpSize;\n      }\n      jumpSize = jumpSize / 2;\n    }\n\n    return jumps;\n  }\n\n}\n"]}