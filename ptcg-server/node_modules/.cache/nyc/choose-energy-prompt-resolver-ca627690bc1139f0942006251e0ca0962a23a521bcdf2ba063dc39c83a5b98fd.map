{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-energy-prompt-resolver.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-energy-prompt-resolver.ts"],"names":[],"mappings":"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","sourcesContent":["import { Player, State, Action, ResolvePromptAction, Prompt, StateUtils, CardType } from '../../game';\nimport { PromptResolver } from './prompt-resolver';\nimport { ChooseEnergyPrompt, EnergyMap } from '../../game/store/prompts/choose-energy-prompt';\n\n\nexport class ChooseEnergyPromptResolver extends PromptResolver {\n\n  public resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action | undefined {\n    if (prompt instanceof ChooseEnergyPrompt) {\n      let result: EnergyMap[] = [];\n      const provides = prompt.energy.slice();\n      const costs: CardType[] = prompt.cost.filter(c => c !== CardType.COLORLESS);\n\n      while (costs.length > 0 && provides.length > 0) {\n        const cost = costs[0];\n        let index = provides.findIndex(p => p.provides.includes(cost));\n\n        if (index === -1) {\n          // concrete energy not found, try to use rainbow energies\n          index = provides.findIndex(p => p.provides.includes(CardType.ANY));\n        }\n\n        if (index === -1) {\n          break; // impossible to pay for the cost\n        }\n\n        const provide = provides[index];\n        provides.splice(index, 1);\n        result.push(provide);\n\n        provide.provides.forEach(c => {\n          if (c === CardType.ANY && costs.length > 0) {\n            costs.shift();\n          } else {\n            const i = costs.indexOf(c);\n            if (i !== -1) {\n              costs.splice(i, 1);\n            }\n          }\n        });\n      }\n\n      if (costs.length > 0) {\n        // Impossible to pay for the cost, try to cancel\n        return new ResolvePromptAction(prompt.id, null);\n      }\n\n      // Only colorless energies are remaining to pay\n      // Sort rest of the provided energies by the score\n      // (Number of provided energy, provided type)\n      provides.sort((p1, p2) => {\n        const score1 = this.getEnergyCardScore(p1.provides);\n        const score2 = this.getEnergyCardScore(p2.provides);\n        return score1 - score2;\n      });\n\n      // Add energies until all colorless cost is paid\n      while (provides.length > 0 && !StateUtils.checkEnoughEnergy(result, prompt.cost)) {\n        const provide = provides.shift();\n        if (provide !== undefined) {\n          result.push(provide);\n        }\n      }\n\n      // Make sure we have used only the required energies to pay\n      let needCheck = true;\n      while (needCheck) {\n        needCheck = false;\n        for (let i = 0; i < result.length; i++) {\n          const tempCards = result.slice();\n          tempCards.splice(i, 1);\n          const enough = StateUtils.checkEnoughEnergy(tempCards, prompt.cost);\n          if (enough) {\n            result = tempCards;\n            needCheck = true;\n            break;\n          }\n        }\n      }\n\n      return new ResolvePromptAction(prompt.id, result);\n    }\n  }\n\n  private getEnergyCardScore(provides: CardType[]): number {\n    let score = 0;\n    provides.forEach(c => {\n      if (c === CardType.COLORLESS) {\n        score += 2;\n      } else if (c === CardType.ANY) {\n        score += 10;\n      } else {\n        score += 3;\n      }\n    });\n    return score;\n  }\n\n}\n"]}