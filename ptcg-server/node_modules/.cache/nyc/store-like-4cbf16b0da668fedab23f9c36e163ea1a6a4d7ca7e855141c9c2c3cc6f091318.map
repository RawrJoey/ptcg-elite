{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/store-like.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/store-like.ts"],"names":[],"mappings":"","sourcesContent":["import { Action } from './actions/action';\nimport { Effect } from './effects/effect';\nimport { Prompt } from './prompts/prompt';\nimport { State } from './state/state';\nimport { StateLogParam } from './state/state-log';\nimport { GameLog } from '../game-message';\n\nexport interface StoreLike {\n  dispatch(action: Action): void;\n\n  reduceEffect(state: State, effect: Effect): State;\n\n  log(state: State, message: GameLog, params?: StateLogParam, client?: number): void;\n\n  waitPrompt(state: State, callback: () => void): State;\n\n  hasPrompts(): boolean;\n\n  prompt<T>(\n    state: State, prompt: Prompt<T>,\n    then: (result: T) => void): State;\n\n  prompt<T>(\n    state: State, prompt: [Prompt<T>],\n    then: (result: T) => void): State;\n\n  prompt<T, S>(\n    state: State, prompt: [Prompt<T>, Prompt<S>],\n    then: (result: [T, S]) => void): State;\n\n  prompt<T, S, R>(\n    state: State, prompt: [Prompt<T>, Prompt<S>, Prompt<R>],\n    then: (result: [T, S, R]) => void): State;\n\n  prompt<T, S, R, P>(\n    state: State, prompt: [Prompt<T>, Prompt<S>, Prompt<R>, Prompt<P>],\n    then: (result: [T, S, R, P]) => void): State;\n\n  prompt<T>(\n    state: State, prompt: Prompt<T>[],\n    then: (result: T[]) => void): State;\n}\n"]}