{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/bots/simulator.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/bots/simulator.ts"],"names":[],"mappings":";;;AAAA,0CAAuC;AAEvC,+CAA8D;AAG9D,8CAA0C;AAC1C,kDAAgD;AAEhD,uCAAwC;AACxC,6CAA0C;AAG1C,MAAa,SAAS;IAIpB,YAAY,KAAY,EAAE,oBAAgD,EAAE;QAC1E,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,EAAE;YACnD,MAAM,IAAI,sBAAS,CAAC,4BAAa,CAAC,0BAA0B,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,wBAAU,CAAC,iBAAiB,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,iBAAS,CAAC,KAAK,EAAE,CAAE,WAAI,CAAE,CAAC,CAAC;IAChD,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAEM,aAAa,CAAC,KAAY,IAAS,CAAC;IAEnC,oBAAoB,CAAC,KAAY;QACvC,IAAI,QAA+D,CAAC;QACpE,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC;QAE3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YACnE,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,QAAQ,GAAG,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC;gBAC5C,MAAM;aACP;SACF;QAED,OAAO,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;IAChD,CAAC;IAEM,QAAQ,CAAC,MAAc;QAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAExC,IAAI,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC1D,OAAO,OAAO,KAAK,SAAS,EAAE;YAC5B,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACrC,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACvD;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CAEF;AA9CD,8BA8CC","sourcesContent":["import { Store } from '../store/store';\nimport { Action } from '../store/actions/action';\nimport { BotArbiter, BotArbiterOptions } from './bot-arbiter';\nimport { State } from '../store/state/state';\nimport { StoreHandler } from '../store/store-handler';\nimport { GameError } from '../game-error';\nimport { GameCoreError } from '../game-message';\nimport { ResolvePromptAction } from '../store/actions/resolve-prompt-action';\nimport { deepClone } from '../../utils';\nimport { Card } from '../store/card/card';\n\n\nexport class Simulator implements StoreHandler {\n  public store: Store;\n  private botArbiter: BotArbiter;\n\n  constructor(state: State, botArbiterOptions: Partial<BotArbiterOptions> = {}) {\n    if (state.prompts.some(p => p.result === undefined)) {\n      throw new GameError(GameCoreError.ERROR_SIMULATOR_NOT_STABLE);\n    }\n    this.botArbiter = new BotArbiter(botArbiterOptions);\n    this.store = new Store(this);\n    this.store.state = deepClone(state, [ Card ]);\n  }\n\n  public clone(): Simulator {\n    return new Simulator(this.store.state);\n  }\n\n  public onStateChange(state: State): void {}\n\n  private handleArbiterPrompts(state: State): ResolvePromptAction | undefined {\n    let resolved: {id: number, action: ResolvePromptAction} | undefined;\n    const unresolved = state.prompts.filter(item => item.result === undefined);\n\n    for (let i = 0; i < unresolved.length; i++) {\n      const action = this.botArbiter.resolvePrompt(state, unresolved[i]);\n      if (action !== undefined) {\n        resolved = { id: unresolved[i].id, action };\n        break;\n      }\n    }\n\n    return resolved ? resolved.action : undefined;\n  }\n\n  public dispatch(action: Action): State {\n    let state = this.store.dispatch(action);\n\n    let resolve = this.handleArbiterPrompts(this.store.state);\n    while (resolve !== undefined) {\n      state = this.store.dispatch(resolve);\n      resolve = this.handleArbiterPrompts(this.store.state);\n    }\n\n    return state;\n  }\n\n}\n"]}