{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/serializer/state-serializer.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/serializer/state-serializer.ts"],"names":[],"mappings":"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","sourcesContent":["import { GameError } from '../game-error';\nimport { GameCoreError } from '../game-message';\nimport { Serializer, SerializerContext, SerializedState, Serialized } from './serializer.interface';\nimport { State } from '../store/state/state';\nimport { Card } from '../store/card/card';\nimport { GenericSerializer } from './generic.serializer';\nimport { Rules } from '../store/state/rules';\nimport { Player } from '../store/state/player';\nimport { CardSerializer } from './card.serializer';\nimport { CardListSerializer } from './card-list.serializer';\nimport { Marker } from '../store/state/card-marker';\nimport { StateLogSerializer } from './state-log.serializer';\nimport { PromptSerializer } from './prompt.serializer';\nimport { PathBuilder } from './path-builder';\nimport { deepIterate, deepClone } from '../../utils';\nimport { JsonPatch } from './json-patch';\nimport { JsonDiff } from './json-patch.interface';\n\nexport class StateSerializer {\n\n  public serializers: Serializer<any>[];\n  public static knownCards: Card[] = [];\n\n  constructor() {\n    this.serializers = [\n      new GenericSerializer(State, 'State'),\n      new GenericSerializer(Rules, 'Rules'),\n      new GenericSerializer(Player, 'Player'),\n      new GenericSerializer(Marker, 'Marker'),\n      new CardSerializer(),\n      new CardListSerializer(),\n      new StateLogSerializer(),\n      new PromptSerializer()\n    ];\n  }\n\n  public serialize(state: State): SerializedState {\n    const serializers = this.serializers;\n    const refs: { node: Object, path: string }[] = [];\n    const pathBuilder = new PathBuilder();\n\n    const replacer: any = function(this: any, key: string, value: any) {\n      pathBuilder.goTo(this, key);\n      const path = pathBuilder.getPath();\n\n      if (value instanceof Array) {\n        return value;\n      }\n      if (value instanceof Object && value._type !== 'Ref') {\n        const ref = refs.find(r => r.node === value);\n        if (ref !== undefined) {\n          return { _type: 'Ref', path: ref.path };\n        }\n        refs.push({ node: value, path });\n        const name = value.constructor.name;\n        if (name === 'Object') {\n          return value;\n        }\n        const serializer = serializers.find(s => s.classes.some(c => value instanceof c));\n        if (serializer !== undefined) {\n          return serializer.serialize(value);\n        }\n        throw new GameError(GameCoreError.ERROR_SERIALIZER, `Unknown serializer for '${name}'.`);\n      }\n      return value;\n    };\n    return JSON.stringify([state.players, state], replacer);\n  }\n\n  public deserialize(serializedState: SerializedState): State {\n    const serializers = this.serializers;\n    const context = this.restoreContext(serializedState);\n\n    const reviver: any = function (this: any, key: string, value: any) {\n      if (value instanceof Array) {\n        return value;\n      }\n      if (value instanceof Object) {\n        const name = (value as Serialized)._type;\n        if (typeof name === 'string') {\n          if (name === 'Ref') {\n            return value;\n          }\n          const serializer = serializers.find(s => s.types.includes(name));\n          if (serializer !== undefined) {\n            return serializer.deserialize(value, context);\n          }\n          throw new GameError(GameCoreError.ERROR_SERIALIZER, `Unknown deserializer for '${name}'.`);\n        }\n      }\n      return value;\n    };\n\n    const parsed = JSON.parse(serializedState, reviver);\n\n    // Restore Refs\n    const pathBuilder = new PathBuilder();\n    deepIterate(parsed, (holder, key, value) => {\n      if (value instanceof Object && value._type === 'Ref') {\n        const reference = pathBuilder.getValue(parsed, value.path);\n        if (reference === undefined) {\n          throw new GameError(GameCoreError.ERROR_SERIALIZER, `Unknown reference '${value.path}'.`);\n        }\n        holder[key] = reference;\n      }\n    });\n\n    const state = parsed[1];\n    return state;\n  }\n\n  public serializeDiff(base: SerializedState | undefined, state: State): SerializedState {\n    if (base === undefined) {\n      return this.serialize(state);\n    }\n    const parsedBase = JSON.parse(base);\n\n    const players1 = parsedBase[0];\n    const state1 = parsedBase[1];\n\n    const serialized2 = this.serialize(state);\n    const parsed2 = JSON.parse(serialized2);\n    const players2 = parsed2[0];\n    const state2 = parsed2[1];\n\n    const jsonPatch = new JsonPatch();\n    const diff = jsonPatch.diff([players1, state1], [players2, state2]);\n    return JSON.stringify([ diff ]);\n  }\n\n  public deserializeDiff(base: SerializedState | undefined, data: SerializedState): State {\n    const updatedData = this.applyDiff(base, data);\n    return this.deserialize(updatedData);\n  }\n\n  public applyDiff(base: SerializedState | undefined, data: SerializedState): SerializedState {\n    if (base === undefined) {\n      return data;\n    }\n\n    const parsed = JSON.parse(data);\n    if (parsed.length > 1) {\n      return data;\n    }\n\n    let [ players, state ] = JSON.parse(base);\n    const diff: JsonDiff[] = parsed[0];\n\n    const jsonPatch = new JsonPatch();\n    [ players, state ] = jsonPatch.apply([ players, state ], diff);\n\n    return JSON.stringify([ players, state ]);\n  }\n\n  public static setKnownCards(cards: Card[]) {\n    StateSerializer.knownCards = cards;\n  }\n\n  private restoreContext(serializedState: SerializedState): SerializerContext {\n    const parsed = JSON.parse(serializedState);\n    const names: string[] = parsed[1].cardNames;\n    const cards: Card[] = [];\n    names.forEach((name, index) => {\n      let card: Card | undefined = StateSerializer.knownCards.find(c => c.fullName === name);\n      if (card === undefined) {\n        throw new GameError(GameCoreError.ERROR_SERIALIZER, `Unknown card '${name}'.`);\n      }\n      card = deepClone(card) as Card;\n      card.id = index;\n      cards.push(card);\n    });\n    return { cards };\n  }\n\n}\n"]}