{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/effect-reducers/game-phase-effect.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/effect-reducers/game-phase-effect.ts"],"names":[],"mappings":"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","sourcesContent":["import { Effect } from '../effects/effect';\nimport { EndTurnEffect, BetweenTurnsEffect } from '../effects/game-phase-effects';\nimport { GameError } from '../../game-error';\nimport { GameMessage, GameLog } from '../../game-message';\nimport { Player } from '../state/player';\nimport { SpecialCondition } from '../card/card-types';\nimport { State, GamePhase, GameWinner } from '../state/state';\nimport { StoreLike } from '../store-like';\nimport { checkState, endGame } from './check-effect';\nimport { CoinFlipPrompt } from '../prompts/coin-flip-prompt';\n\nfunction getActivePlayer(state: State): Player {\n  return state.players[state.activePlayer];\n}\n\nexport function betweenTurns(store: StoreLike, state: State, onComplete: () => void): State {\n  if (state.phase === GamePhase.PLAYER_TURN || state.phase === GamePhase.ATTACK) {\n    state.phase = GamePhase.BETWEEN_TURNS;\n  }\n\n  for (const player of state.players) {\n    store.reduceEffect(state, new BetweenTurnsEffect(player));\n  }\n\n  if (store.hasPrompts()) {\n    return store.waitPrompt(state, () => {\n      checkState(store, state, () => onComplete());\n    });\n  }\n  return checkState(store, state, () => onComplete());\n}\n\nexport function initNextTurn(store: StoreLike, state: State): State {\n  if ([GamePhase.SETUP, GamePhase.BETWEEN_TURNS].indexOf(state.phase) === -1) {\n    return state;\n  }\n\n  let player: Player = getActivePlayer(state);\n\n  if (state.phase === GamePhase.SETUP) {\n    state.phase = GamePhase.PLAYER_TURN;\n  }\n\n  if (state.phase === GamePhase.BETWEEN_TURNS) {\n    state.activePlayer = state.activePlayer ? 0 : 1;\n    state.phase = GamePhase.PLAYER_TURN;\n    player = getActivePlayer(state);\n  }\n\n  state.turn++;\n  store.log(state, GameLog.LOG_TURN, { turn: state.turn });\n\n  // Skip draw card on first turn\n  if (state.turn === 1 && !state.rules.firstTurnDrawCard) {\n    return state;\n  }\n\n  // Draw card at the beginning\n  store.log(state, GameLog.LOG_PLAYER_DRAWS_CARD, { name: player.name });\n  if (player.deck.cards.length === 0) {\n\n    store.log(state, GameLog.LOG_PLAYER_NO_CARDS_IN_DECK, { name: player.name });\n    const winner = state.activePlayer ? GameWinner.PLAYER_1 : GameWinner.PLAYER_2;\n    state = endGame(store, state, winner);\n    return state;\n  }\n\n  player.deck.moveTo(player.hand, 1);\n  return state;\n}\n\nfunction startNextTurn(store: StoreLike, state: State): State {\n  const player = state.players[state.activePlayer];\n  store.log(state, GameLog.LOG_PLAYER_ENDS_TURN, { name: player.name });\n\n  // Remove Paralyzed at the end of the turn\n  player.active.removeSpecialCondition(SpecialCondition.PARALYZED);\n\n  // Move supporter cards to discard\n  player.supporter.moveTo(player.discard);\n\n  return betweenTurns(store, state, () => {\n    if (state.phase !== GamePhase.FINISHED) {\n      return initNextTurn(store, state);\n    }\n  });\n}\n\nfunction handleSpecialConditions(store: StoreLike, state: State, effect: BetweenTurnsEffect) {\n  const player = effect.player;\n  for (const sp of player.active.specialConditions) {\n    switch (sp) {\n      case SpecialCondition.POISONED:\n        player.active.damage += effect.poisonDamage;\n        break;\n      case SpecialCondition.BURNED:\n        if (effect.burnFlipResult === true) {\n          break;\n        }\n        if (effect.burnFlipResult === false) {\n          player.active.damage += effect.burnDamage;\n          break;\n        }\n        store.prompt(state, new CoinFlipPrompt(\n          player.id,\n          GameMessage.FLIP_BURNED\n        ), result => {\n          if (result === false) {\n            player.active.damage += effect.burnDamage;\n          }\n        });\n        break;\n      case SpecialCondition.ASLEEP:\n        if (effect.asleepFlipResult === true) {\n          player.active.removeSpecialCondition(SpecialCondition.ASLEEP);\n          break;\n        }\n        if (effect.asleepFlipResult === false) {\n          break;\n        }\n        store.log(state, GameLog.LOG_FLIP_ASLEEP, { name: player.name });\n        store.prompt(state, new CoinFlipPrompt(\n          player.id,\n          GameMessage.FLIP_ASLEEP\n        ), result => {\n          if (result === true) {\n            player.active.removeSpecialCondition(SpecialCondition.ASLEEP);\n          }\n        });\n        break;\n    }\n  }\n}\n\nexport function gamePhaseReducer(store: StoreLike, state: State, effect: Effect): State {\n\n  if (effect instanceof EndTurnEffect) {\n    const player = state.players[state.activePlayer];\n\n    if (player === undefined) {\n      throw new GameError(GameMessage.NOT_YOUR_TURN);\n    }\n\n    state = checkState(store, state, () => {\n      if (state.phase === GamePhase.FINISHED) {\n        return;\n      }\n\n      return startNextTurn(store, state);\n    });\n\n    return state;\n  }\n\n  if (effect instanceof BetweenTurnsEffect) {\n    handleSpecialConditions(store, state, effect);\n  }\n\n  return state;\n}\n"]}