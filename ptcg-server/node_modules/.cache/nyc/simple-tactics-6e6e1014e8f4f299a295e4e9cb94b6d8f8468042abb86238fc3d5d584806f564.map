{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/simple-tactics.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/simple-tactics/simple-tactics.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, Player, State, PokemonCardList, CardTarget, PlayerType,\n  SlotType, GameError, GameMessage, Prompt, ResolvePromptAction } from '../../game';\nimport { Simulator } from '../../game/bots/simulator';\nimport { SimpleBotOptions } from '../simple-bot-options';\nimport { StateScore } from '../state-score/state-score';\n\nexport type SimpleTacticList = (new (options: SimpleBotOptions) => SimpleTactic)[];\n\nexport abstract class SimpleTactic {\n\n  private stateScore: StateScore;\n\n  constructor(protected options: SimpleBotOptions) {\n    this.stateScore = new StateScore(this.options);\n  }\n\n  public abstract useTactic(state: State, player: Player): Action | undefined;\n\n  protected getCardTarget(player: Player, state: State, target: PokemonCardList): CardTarget {\n    if (target === player.active) {\n      return { player: PlayerType.BOTTOM_PLAYER, slot: SlotType.ACTIVE, index: 0 };\n    }\n\n    for (let index = 0; index < player.bench.length; index++) {\n      if (target === player.bench[index]) {\n        return { player: PlayerType.BOTTOM_PLAYER, slot: SlotType.BENCH, index };\n      }\n    }\n\n    const opponent = state.players.find(p => p !== player);\n    if (opponent === undefined) {\n      throw new GameError(GameMessage.INVALID_GAME_STATE);\n    }\n\n    if (target === opponent.active) {\n      return { player: PlayerType.TOP_PLAYER, slot: SlotType.ACTIVE, index: 0 };\n    }\n\n    for (let index = 0; index < opponent.bench.length; index++) {\n      if (target === opponent.bench[index]) {\n        return { player: PlayerType.TOP_PLAYER, slot: SlotType.BENCH, index };\n      }\n    }\n\n    throw new GameError(GameMessage.INVALID_TARGET);\n  }\n\n  protected simulateAction(state: State, action: Action): State | undefined {\n    let newState = state;\n    try {\n      const simulator = new Simulator(state, this.options.arbiter);\n      newState = simulator.dispatch(action);\n      \n      while (simulator.store.state.prompts.some(p => p.result === undefined)) {\n        newState = simulator.store.state;\n        const prompt = newState.prompts.find(p => p.result === undefined);\n        if (prompt === undefined) {\n          break;\n        }\n        const player = newState.players.find(p => p.id === prompt.playerId);\n        if (player === undefined) {\n          break;\n        }\n        const resolveAction = this.resolvePrompt(newState, player, prompt);\n        newState = simulator.dispatch(resolveAction);\n      }\n    } catch (error) {\n      return undefined;\n    }\n\n    return newState;\n  }\n\n  private resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action {\n    const resolvers = this.options.promptResolvers.map(resolver => new resolver(this.options));\n\n    for (let i = 0; i < resolvers.length; i++) {\n      const action = resolvers[i].resolvePrompt(state, player, prompt);\n      if (action !== undefined) {\n        return action;\n      }\n    }\n\n    // Unknown prompt. Try to cancel it.\n    return new ResolvePromptAction(prompt.id, null);\n  }\n\n  protected getStateScore(state: State, playerId: number): number {\n    return this.stateScore.getScore(state, playerId);\n  }\n\n  protected evaluateAction(state: State, playerId: number, action: Action, passTurnScore: number = 0): number | undefined {\n    const newState = this.simulateAction(state, action);\n    const newPlayer = newState && newState.players.find(p => p.id === playerId);\n    if (newState !== undefined && newPlayer !== undefined) {\n      return this.stateScore.getScore(newState, playerId)\n        + (newState.turn > state.turn ? passTurnScore : 0);\n    }\n  }\n\n}\n"]}