{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/state-score/opponent-score.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/state-score/opponent-score.ts"],"names":[],"mappings":";;;AAAA,qCAAuE;AACvE,mCAAsC;AAGtC,MAAa,aAAc,SAAQ,mBAAW;IAErC,QAAQ,CAAC,KAAY,EAAE,QAAgB;QAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,iBAAU,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC;QAE5C,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,sCAAsC;QACtC,KAAK,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAElD,sCAAsC;QACtC,KAAK,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAElD,qCAAqC;QACrC,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;QACrE,IAAI,YAAY,EAAE;YAChB,KAAK,IAAI,MAAM,CAAC,UAAU,CAAC;SAC5B;QAED,2CAA2C;QAC3C,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,iBAAU,CAAC,CAAC,CAAC;QACpF,IAAI,cAAc,EAAE;YAClB,KAAK,IAAI,MAAM,CAAC,cAAc,CAAC;SAChC;QAED,QAAQ,CAAC,cAAc,CAAC,iBAAU,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE;YACxD,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,iBAAU,CAAC,CAAC;YACrE,KAAK,IAAI,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;YACzC,KAAK,IAAI,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC;CAEF;AApCD,sCAoCC","sourcesContent":["import { State, StateUtils, EnergyCard, PlayerType } from '../../game';\nimport { SimpleScore } from './score';\n\n\nexport class OpponentScore extends SimpleScore {\n\n  public getScore(state: State, playerId: number): number {\n    const player = this.getPlayer(state, playerId);\n    const opponent = StateUtils.getOpponent(state, player);\n    const scores = this.options.scores.opponent;\n\n    let score = 0;\n\n    // for each card in the opponents deck\n    score += scores.deck * opponent.deck.cards.length;\n\n    // for each card in the opponents hand\n    score += scores.hand * opponent.hand.cards.length;\n\n    // bonus if opponent's bench is empty\n    const isBenchEmpty = opponent.bench.every(b => b.cards.length === 0);\n    if (isBenchEmpty) {\n      score += scores.emptyBench;\n    }\n\n    // Opponent's active has no attached energy\n    const noActiveEnergy = opponent.active.cards.every(c => !(c instanceof EnergyCard));\n    if (noActiveEnergy) {\n      score += scores.noActiveEnergy;\n    }\n\n    opponent.forEachPokemon(PlayerType.TOP_PLAYER, cardList => {\n      const energies = cardList.cards.filter(c => c instanceof EnergyCard);\n      score += scores.energy * energies.length;\n      score += scores.board * cardList.cards.length;\n    });\n\n    return score;\n  }\n\n}\n"]}