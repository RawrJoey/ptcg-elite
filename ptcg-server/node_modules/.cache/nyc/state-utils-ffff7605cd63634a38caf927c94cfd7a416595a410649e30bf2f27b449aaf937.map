{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/state-utils.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/state-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Card } from './card/card';\nimport { CardList } from './state/card-list';\nimport { CardTarget, PlayerType, SlotType } from './actions/play-card-action';\nimport { CardType } from './card/card-types';\nimport { GameError } from '../game-error';\nimport { GameMessage } from '../game-message';\nimport { State } from './state/state';\nimport { Player } from './state/player';\nimport { PokemonCardList } from './state/pokemon-card-list';\nimport { EnergyMap } from './prompts/choose-energy-prompt';\n\nexport class StateUtils {\n  public static checkEnoughEnergy(energy: EnergyMap[], cost: CardType[]): boolean {\n    if (cost.length === 0) {\n      return true;\n    }\n\n    const provides: CardType[] = [];\n    energy.forEach(e => {\n      e.provides.forEach(cardType => provides.push(cardType));\n    });\n\n    let colorless = 0;\n    let rainbow = 0;\n\n    // First remove from array cards with specific energy types\n    cost.forEach(costType => {\n      switch (costType) {\n        case CardType.ANY:\n        case CardType.NONE:\n          break;\n        case CardType.COLORLESS:\n          colorless += 1;\n          break;\n        default: {\n          const index = provides.findIndex(energy => energy === costType);\n          if (index !== -1) {\n            provides.splice(index, 1);\n          } else {\n            rainbow += 1;\n          }\n        }\n      }\n    });\n\n    // Check if we have enough rainbow energies\n    for (let i = 0; i < rainbow; i++) {\n      const index = provides.findIndex(energy => energy === CardType.ANY);\n      if (index !== -1) {\n        provides.splice(index, 1);\n      } else {\n        return false;\n      }\n    }\n\n    // Rest cards can be used to pay for colorless energies\n    return provides.length >= colorless;\n  }\n\n  public static checkExactEnergy(energy: EnergyMap[], cost: CardType[]): boolean {\n    let enough = StateUtils.checkEnoughEnergy(energy, cost);\n    if (!enough) {\n      return false;\n    }\n\n    for (let i = 0; i < energy.length; i++) {\n      const tempCards = energy.slice();\n      tempCards.splice(i, 1);\n      enough = StateUtils.checkEnoughEnergy(tempCards, cost);\n      if (enough) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static getOpponent(state: State, player: Player): Player {\n    const opponent = state.players.find(p => p.id !== player.id);\n    if (opponent === undefined) {\n      throw new GameError(GameMessage.INVALID_GAME_STATE);\n    }\n    return opponent;\n  }\n\n  public static getTarget(state: State, player: Player, target: CardTarget): PokemonCardList {\n    if (target.player === PlayerType.TOP_PLAYER) {\n      player = StateUtils.getOpponent(state, player);\n    }\n    if (target.slot === SlotType.ACTIVE) {\n      return player.active;\n    }\n    if (target.slot !== SlotType.BENCH) {\n      throw new GameError(GameMessage.INVALID_TARGET);\n    }\n    if (player.bench[target.index] === undefined) {\n      throw new GameError(GameMessage.INVALID_TARGET);\n    }\n    return player.bench[target.index];\n  }\n\n  public static findCardList(state: State, card: Card): CardList {\n    const cardLists: CardList[] = [];\n    for (const player of state.players) {\n      cardLists.push(player.active);\n      cardLists.push(player.deck);\n      cardLists.push(player.discard);\n      cardLists.push(player.hand);\n      cardLists.push(player.stadium);\n      cardLists.push(player.supporter);\n      player.bench.forEach(item => cardLists.push(item));\n      player.prizes.forEach(item => cardLists.push(item));\n    }\n    const cardList = cardLists.find(c => c.cards.includes(card));\n    if (cardList === undefined) {\n      throw new GameError(GameMessage.INVALID_GAME_STATE);\n    }\n    return cardList;\n  }\n\n  public static findOwner(state: State, cardList: CardList): Player {\n    for (const player of state.players) {\n      const cardLists: CardList[] = [];\n      cardLists.push(player.active);\n      cardLists.push(player.deck);\n      cardLists.push(player.discard);\n      cardLists.push(player.hand);\n      cardLists.push(player.stadium);\n      cardLists.push(player.supporter);\n      player.bench.forEach(item => cardLists.push(item));\n      player.prizes.forEach(item => cardLists.push(item));\n      if (cardLists.includes(cardList)) {\n        return player;\n      }\n    }\n    throw new GameError(GameMessage.INVALID_GAME_STATE);\n  }\n\n  public static getStadiumCard(state: State): Card | undefined {\n    for (const player of state.players) {\n      if (player.stadium.cards.length > 0) {\n        return player.stadium.cards[0];\n      }\n    }\n    return undefined;\n  }\n\n}\n"]}