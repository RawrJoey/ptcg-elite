{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/utils/utils.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["\nexport function deepCompare(x: any, y: any): boolean {\n\n  if (x === y) { return true; }\n  // if both x and y are null or undefined and exactly the same\n\n  if (!(x instanceof Object) || !(y instanceof Object)) { return false; }\n  // if they are not strictly equal, they both need to be Objects\n\n  if (x.constructor !== y.constructor) { return false; }\n  // they must have the exact same prototype chain, the closest we can do is\n  // test there constructor.\n\n  for (const p in x) {\n    if (!Object.prototype.hasOwnProperty.call(x, p)) { continue; }\n    // other properties were tested using x.constructor === y.constructor\n\n    if (!Object.prototype.hasOwnProperty.call(y, p)) { return false; }\n    // allows to compare x[ p ] and y[ p ] when set to undefined\n\n    if (x[p] === y[p]) { continue; }\n    // if they have the same strict value or identity then they are equal\n\n    if (typeof (x[p]) !== 'object') { return false; }\n    // Numbers, Strings, Functions, Booleans must be strictly equal\n\n    if (!deepCompare(x[p], y[p])) { return false; }\n    // Objects and Arrays must be tested recursively\n  }\n\n  for (const p in y) {\n    if (Object.prototype.hasOwnProperty.call(y, p) && !Object.prototype.hasOwnProperty.call(x, p)) { return false; }\n    // allows x[ p ] to be set to undefined\n  }\n  return true;\n}\n\nexport function deepIterate(source: any, callback: (holder: any, key: string, value: any) => void): void {\n  if (source === null) { return; }\n\n  if (source instanceof Array) {\n    source.forEach((item: any) => deepIterate(item, callback));\n  }\n\n  if (source instanceof Object) {\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        deepIterate(source[key], callback);\n        callback(source, key, source[key]);\n      }\n    }\n  }\n}\n\nexport function deepClone(source: any, ignores: Function[] = [], refMap: {s: Object, d: Object}[] = []): any {\n  if (source === null) { return null; }\n\n  if (source instanceof Array) {\n    return source.map((item: any) => deepClone(item, ignores, refMap));\n  }\n\n  if (source instanceof Object) {\n    if (ignores.some(ignore => source instanceof ignore)) {\n      return source;\n    }\n    const ref = refMap.find(item => item.s === source);\n    if (ref !== undefined) {\n      return ref.d;\n    }\n    const dest = Object.create(source);\n    refMap.push({s: source, d: dest});\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        dest[key] = deepClone(source[key], ignores, refMap);\n      }\n    }\n    return dest;\n  }\n\n  return source;\n}\n\nexport function generateId<T extends {id: number}[]>(array: T): number {\n  if (array.length === 0) {\n    return 1;\n  }\n\n  const last = array[array.length - 1];\n  let id = last.id + 1;\n\n  while (array.find(g => g.id === id)) {\n    if (id === Number.MAX_VALUE) {\n      id = 0;\n    }\n    id = id + 1;\n  }\n\n  return id;\n}\n"]}