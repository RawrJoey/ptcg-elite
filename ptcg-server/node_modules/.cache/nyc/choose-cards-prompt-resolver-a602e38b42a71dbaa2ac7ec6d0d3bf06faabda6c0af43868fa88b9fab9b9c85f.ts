"use strict";function cov_1g2cx3sfpy(){var path="/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-cards-prompt-resolver.ts";var hash="38adfd80ad88190e5cf82607bde8926285244929";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-cards-prompt-resolver.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:43}},"2":{start:{line:4,column:15},end:{line:4,column:36}},"3":{start:{line:5,column:26},end:{line:5,column:54}},"4":{start:{line:6,column:30},end:{line:6,column:85}},"5":{start:{line:9,column:8},end:{line:19,column:9}},"6":{start:{line:10,column:25},end:{line:10,column:63}},"7":{start:{line:11,column:12},end:{line:11,column:61}},"8":{start:{line:12,column:12},end:{line:14,column:13}},"9":{start:{line:13,column:16},end:{line:13,column:51}},"10":{start:{line:15,column:12},end:{line:17,column:13}},"11":{start:{line:16,column:16},end:{line:16,column:30}},"12":{start:{line:18,column:12},end:{line:18,column:69}},"13":{start:{line:22,column:23},end:{line:22,column:25}},"14":{start:{line:24,column:24},end:{line:24,column:42}},"15":{start:{line:25,column:8},end:{line:25,column:31}},"16":{start:{line:27,column:8},end:{line:31,column:9}},"17":{start:{line:28,column:12},end:{line:30,column:13}},"18":{start:{line:29,column:16},end:{line:29,column:34}},"19":{start:{line:32,column:8},end:{line:32,column:37}},"20":{start:{line:33,column:8},end:{line:33,column:22}},"21":{start:{line:36,column:25},end:{line:36,column:46}},"22":{start:{line:37,column:8},end:{line:39,column:11}},"23":{start:{line:38,column:12},end:{line:38,column:59}},"24":{start:{line:40,column:22},end:{line:43,column:10}},"25":{start:{line:41,column:26},end:{line:41,column:84}},"26":{start:{line:42,column:12},end:{line:42,column:35}},"27":{start:{line:44,column:8},end:{line:44,column:48}},"28":{start:{line:44,column:29},end:{line:44,column:46}},"29":{start:{line:45,column:8},end:{line:45,column:38}},"30":{start:{line:45,column:30},end:{line:45,column:36}},"31":{start:{line:48,column:0},end:{line:48,column:62}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:4},end:{line:8,column:5}},loc:{start:{line:8,column:41},end:{line:20,column:5}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:38},end:{line:34,column:5}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:35,column:4},end:{line:35,column:5}},loc:{start:{line:35,column:38},end:{line:46,column:5}},line:35},"3":{name:"(anonymous_3)",decl:{start:{line:37,column:51},end:{line:37,column:52}},loc:{start:{line:37,column:68},end:{line:39,column:9}},line:37},"4":{name:"(anonymous_4)",decl:{start:{line:40,column:57},end:{line:40,column:58}},loc:{start:{line:40,column:65},end:{line:43,column:9}},line:40},"5":{name:"(anonymous_5)",decl:{start:{line:44,column:19},end:{line:44,column:20}},loc:{start:{line:44,column:29},end:{line:44,column:46}},line:44},"6":{name:"(anonymous_6)",decl:{start:{line:45,column:25},end:{line:45,column:26}},loc:{start:{line:45,column:30},end:{line:45,column:36}},line:45}},branchMap:{"0":{loc:{start:{line:9,column:8},end:{line:19,column:9}},type:"if",locations:[{start:{line:9,column:8},end:{line:19,column:9}},{start:{line:9,column:8},end:{line:19,column:9}}],line:9},"1":{loc:{start:{line:12,column:12},end:{line:14,column:13}},type:"if",locations:[{start:{line:12,column:12},end:{line:14,column:13}},{start:{line:12,column:12},end:{line:14,column:13}}],line:12},"2":{loc:{start:{line:15,column:12},end:{line:17,column:13}},type:"if",locations:[{start:{line:15,column:12},end:{line:17,column:13}},{start:{line:15,column:12},end:{line:17,column:13}}],line:15},"3":{loc:{start:{line:28,column:12},end:{line:30,column:13}},type:"if",locations:[{start:{line:28,column:12},end:{line:30,column:13}},{start:{line:28,column:12},end:{line:30,column:13}}],line:28}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},inputSourceMap:{version:3,file:"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-cards-prompt-resolver.ts",sources:["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-cards-prompt-resolver.ts"],names:[],mappings:";;;AAAA,qCAAgG;AAChG,uDAAmD;AACnD,sFAAiF;AAGjF,MAAa,yBAA0B,SAAQ,gCAAc;IAEpD,aAAa,CAAC,KAAY,EAAE,MAAc,EAAE,MAAmB;QACpE,IAAI,MAAM,YAAY,uCAAiB,EAAE;YACvC,IAAI,MAAM,GAAkB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACnE,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACjD,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;gBACtC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;aACpC;YACD,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;gBACtC,MAAM,GAAG,IAAI,CAAC;aACf;YACD,OAAO,IAAI,0BAAmB,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;SACnD;IACH,CAAC;IAEO,kBAAkB,CAAC,MAAyB,EAAE,KAAa;QACjE,MAAM,MAAM,GAAW,EAAE,CAAC;QAE1B,mDAAmD;QACnD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC;QAEvB,iEAAiE;QACjE,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,CAAC,EAAE;gBACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;SACF;QAED,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC;QAC7B,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,kBAAkB,CAAC,KAAY,EAAE,MAAyB;QAChE,MAAM,QAAQ,GAAG,IAAI,eAAQ,EAAE,CAAC;QAEhC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YACzD,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtD,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACzE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CAEF;AAlDD,8DAkDC",sourcesContent:["import { Player, State, Action, ResolvePromptAction, Prompt, Card, CardList } from '../../game';\nimport { PromptResolver } from './prompt-resolver';\nimport { ChooseCardsPrompt } from '../../game/store/prompts/choose-cards-prompt';\n\n\nexport class ChooseCardsPromptResolver extends PromptResolver {\n\n  public resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action | undefined {\n    if (prompt instanceof ChooseCardsPrompt) {\n      let result: Card[] | null = this.buildCardsToChoose(state, prompt);\n      result = this.removeInvalidCards(prompt, result);\n      if (result.length > prompt.options.max) {\n        result.length = prompt.options.max;\n      }\n      if (result.length < prompt.options.min) {\n        result = null;\n      }\n      return new ResolvePromptAction(prompt.id, result);\n    }\n  }\n\n  private removeInvalidCards(prompt: ChooseCardsPrompt, cards: Card[]): Card[] {\n    const result: Card[] = [];\n\n    // temporary remove min restriction for this prompt\n    const minCopy = prompt.options.min;\n    prompt.options.min = 0;\n\n    // Add card by card to the results and check if it is still valid\n    for (const card of cards) {\n      if (prompt.validate([...result, card])) {\n        result.push(card);\n      }\n    }\n\n    prompt.options.min = minCopy;\n    return result;\n  }\n\n  private buildCardsToChoose(state: State, prompt: ChooseCardsPrompt): Card[] {\n    const cardList = new CardList();\n\n    cardList.cards = prompt.cards.cards.filter((card, index) => {\n      return !prompt.options.blocked.includes(index);\n    });\n\n    const cards = cardList.filter(prompt.filter).map(card => {\n      const score = this.stateScore.getCardScore(state, prompt.playerId, card);\n      return { card, score };\n    });\n\n    cards.sort((a, b) => b.score - a.score);\n    return cards.map(c => c.card);\n  }\n\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"38adfd80ad88190e5cf82607bde8926285244929"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1g2cx3sfpy=function(){return actualCoverage;};}return actualCoverage;}cov_1g2cx3sfpy();cov_1g2cx3sfpy().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_1g2cx3sfpy().s[1]++;exports.ChooseCardsPromptResolver=void 0;const game_1=(cov_1g2cx3sfpy().s[2]++,require("../../game"));const prompt_resolver_1=(cov_1g2cx3sfpy().s[3]++,require("./prompt-resolver"));const choose_cards_prompt_1=(cov_1g2cx3sfpy().s[4]++,require("../../game/store/prompts/choose-cards-prompt"));class ChooseCardsPromptResolver extends(prompt_resolver_1.PromptResolver){resolvePrompt(state,player,prompt){cov_1g2cx3sfpy().f[0]++;cov_1g2cx3sfpy().s[5]++;if(prompt instanceof choose_cards_prompt_1.ChooseCardsPrompt){cov_1g2cx3sfpy().b[0][0]++;let result=(cov_1g2cx3sfpy().s[6]++,this.buildCardsToChoose(state,prompt));cov_1g2cx3sfpy().s[7]++;result=this.removeInvalidCards(prompt,result);cov_1g2cx3sfpy().s[8]++;if(result.length>prompt.options.max){cov_1g2cx3sfpy().b[1][0]++;cov_1g2cx3sfpy().s[9]++;result.length=prompt.options.max;}else{cov_1g2cx3sfpy().b[1][1]++;}cov_1g2cx3sfpy().s[10]++;if(result.length<prompt.options.min){cov_1g2cx3sfpy().b[2][0]++;cov_1g2cx3sfpy().s[11]++;result=null;}else{cov_1g2cx3sfpy().b[2][1]++;}cov_1g2cx3sfpy().s[12]++;return new game_1.ResolvePromptAction(prompt.id,result);}else{cov_1g2cx3sfpy().b[0][1]++;}}removeInvalidCards(prompt,cards){cov_1g2cx3sfpy().f[1]++;const result=(cov_1g2cx3sfpy().s[13]++,[]);// temporary remove min restriction for this prompt
const minCopy=(cov_1g2cx3sfpy().s[14]++,prompt.options.min);cov_1g2cx3sfpy().s[15]++;prompt.options.min=0;// Add card by card to the results and check if it is still valid
cov_1g2cx3sfpy().s[16]++;for(const card of cards){cov_1g2cx3sfpy().s[17]++;if(prompt.validate([...result,card])){cov_1g2cx3sfpy().b[3][0]++;cov_1g2cx3sfpy().s[18]++;result.push(card);}else{cov_1g2cx3sfpy().b[3][1]++;}}cov_1g2cx3sfpy().s[19]++;prompt.options.min=minCopy;cov_1g2cx3sfpy().s[20]++;return result;}buildCardsToChoose(state,prompt){cov_1g2cx3sfpy().f[2]++;const cardList=(cov_1g2cx3sfpy().s[21]++,new game_1.CardList());cov_1g2cx3sfpy().s[22]++;cardList.cards=prompt.cards.cards.filter((card,index)=>{cov_1g2cx3sfpy().f[3]++;cov_1g2cx3sfpy().s[23]++;return!prompt.options.blocked.includes(index);});const cards=(cov_1g2cx3sfpy().s[24]++,cardList.filter(prompt.filter).map(card=>{cov_1g2cx3sfpy().f[4]++;const score=(cov_1g2cx3sfpy().s[25]++,this.stateScore.getCardScore(state,prompt.playerId,card));cov_1g2cx3sfpy().s[26]++;return{card,score};}));cov_1g2cx3sfpy().s[27]++;cards.sort((a,b)=>{cov_1g2cx3sfpy().f[5]++;cov_1g2cx3sfpy().s[28]++;return b.score-a.score;});cov_1g2cx3sfpy().s[29]++;return cards.map(c=>{cov_1g2cx3sfpy().f[6]++;cov_1g2cx3sfpy().s[30]++;return c.card;});}}cov_1g2cx3sfpy().s[31]++;exports.ChooseCardsPromptResolver=ChooseCardsPromptResolver;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2pvZW15ZXJzY291Z2gvRG9jdW1lbnRzL0dpdEh1Yi9wdGNnLWVwc2QvcHRjZy1zZXJ2ZXIvc3JjL3NpbXBsZS1ib3QvcHJvbXB0LXJlc29sdmVyL2Nob29zZS1jYXJkcy1wcm9tcHQtcmVzb2x2ZXIudHMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb2VteWVyc2NvdWdoL0RvY3VtZW50cy9HaXRIdWIvcHRjZy1lcHNkL3B0Y2ctc2VydmVyL3NyYy9zaW1wbGUtYm90L3Byb21wdC1yZXNvbHZlci9jaG9vc2UtY2FyZHMtcHJvbXB0LXJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFnRztBQUNoRyx1REFBbUQ7QUFDbkQsc0ZBQWlGO0FBR2pGLE1BQWEseUJBQTBCLFNBQVEsZ0NBQWM7SUFFcEQsYUFBYSxDQUFDLEtBQVksRUFBRSxNQUFjLEVBQUUsTUFBbUI7UUFDcEUsSUFBSSxNQUFNLFlBQVksdUNBQWlCLEVBQUU7WUFDdkMsSUFBSSxNQUFNLEdBQWtCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDbkUsTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDakQsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO2dCQUN0QyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO2FBQ3BDO1lBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO2dCQUN0QyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ2Y7WUFDRCxPQUFPLElBQUksMEJBQW1CLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxNQUF5QixFQUFFLEtBQWE7UUFDakUsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDO1FBRTFCLG1EQUFtRDtRQUNuRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFdkIsaUVBQWlFO1FBQ2pFLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUU7Z0JBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbkI7U0FDRjtRQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztRQUM3QixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU8sa0JBQWtCLENBQUMsS0FBWSxFQUFFLE1BQXlCO1FBQ2hFLE1BQU0sUUFBUSxHQUFHLElBQUksZUFBUSxFQUFFLENBQUM7UUFFaEMsUUFBUSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBRUY7QUFsREQsOERBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGxheWVyLCBTdGF0ZSwgQWN0aW9uLCBSZXNvbHZlUHJvbXB0QWN0aW9uLCBQcm9tcHQsIENhcmQsIENhcmRMaXN0IH0gZnJvbSAnLi4vLi4vZ2FtZSc7XG5pbXBvcnQgeyBQcm9tcHRSZXNvbHZlciB9IGZyb20gJy4vcHJvbXB0LXJlc29sdmVyJztcbmltcG9ydCB7IENob29zZUNhcmRzUHJvbXB0IH0gZnJvbSAnLi4vLi4vZ2FtZS9zdG9yZS9wcm9tcHRzL2Nob29zZS1jYXJkcy1wcm9tcHQnO1xuXG5cbmV4cG9ydCBjbGFzcyBDaG9vc2VDYXJkc1Byb21wdFJlc29sdmVyIGV4dGVuZHMgUHJvbXB0UmVzb2x2ZXIge1xuXG4gIHB1YmxpYyByZXNvbHZlUHJvbXB0KHN0YXRlOiBTdGF0ZSwgcGxheWVyOiBQbGF5ZXIsIHByb21wdDogUHJvbXB0PGFueT4pOiBBY3Rpb24gfCB1bmRlZmluZWQge1xuICAgIGlmIChwcm9tcHQgaW5zdGFuY2VvZiBDaG9vc2VDYXJkc1Byb21wdCkge1xuICAgICAgbGV0IHJlc3VsdDogQ2FyZFtdIHwgbnVsbCA9IHRoaXMuYnVpbGRDYXJkc1RvQ2hvb3NlKHN0YXRlLCBwcm9tcHQpO1xuICAgICAgcmVzdWx0ID0gdGhpcy5yZW1vdmVJbnZhbGlkQ2FyZHMocHJvbXB0LCByZXN1bHQpO1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPiBwcm9tcHQub3B0aW9ucy5tYXgpIHtcbiAgICAgICAgcmVzdWx0Lmxlbmd0aCA9IHByb21wdC5vcHRpb25zLm1heDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoIDwgcHJvbXB0Lm9wdGlvbnMubWluKSB7XG4gICAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJlc29sdmVQcm9tcHRBY3Rpb24ocHJvbXB0LmlkLCByZXN1bHQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlSW52YWxpZENhcmRzKHByb21wdDogQ2hvb3NlQ2FyZHNQcm9tcHQsIGNhcmRzOiBDYXJkW10pOiBDYXJkW10ge1xuICAgIGNvbnN0IHJlc3VsdDogQ2FyZFtdID0gW107XG5cbiAgICAvLyB0ZW1wb3JhcnkgcmVtb3ZlIG1pbiByZXN0cmljdGlvbiBmb3IgdGhpcyBwcm9tcHRcbiAgICBjb25zdCBtaW5Db3B5ID0gcHJvbXB0Lm9wdGlvbnMubWluO1xuICAgIHByb21wdC5vcHRpb25zLm1pbiA9IDA7XG5cbiAgICAvLyBBZGQgY2FyZCBieSBjYXJkIHRvIHRoZSByZXN1bHRzIGFuZCBjaGVjayBpZiBpdCBpcyBzdGlsbCB2YWxpZFxuICAgIGZvciAoY29uc3QgY2FyZCBvZiBjYXJkcykge1xuICAgICAgaWYgKHByb21wdC52YWxpZGF0ZShbLi4ucmVzdWx0LCBjYXJkXSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY2FyZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvbXB0Lm9wdGlvbnMubWluID0gbWluQ29weTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZENhcmRzVG9DaG9vc2Uoc3RhdGU6IFN0YXRlLCBwcm9tcHQ6IENob29zZUNhcmRzUHJvbXB0KTogQ2FyZFtdIHtcbiAgICBjb25zdCBjYXJkTGlzdCA9IG5ldyBDYXJkTGlzdCgpO1xuXG4gICAgY2FyZExpc3QuY2FyZHMgPSBwcm9tcHQuY2FyZHMuY2FyZHMuZmlsdGVyKChjYXJkLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuICFwcm9tcHQub3B0aW9ucy5ibG9ja2VkLmluY2x1ZGVzKGluZGV4KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNhcmRzID0gY2FyZExpc3QuZmlsdGVyKHByb21wdC5maWx0ZXIpLm1hcChjYXJkID0+IHtcbiAgICAgIGNvbnN0IHNjb3JlID0gdGhpcy5zdGF0ZVNjb3JlLmdldENhcmRTY29yZShzdGF0ZSwgcHJvbXB0LnBsYXllcklkLCBjYXJkKTtcbiAgICAgIHJldHVybiB7IGNhcmQsIHNjb3JlIH07XG4gICAgfSk7XG5cbiAgICBjYXJkcy5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSk7XG4gICAgcmV0dXJuIGNhcmRzLm1hcChjID0+IGMuY2FyZCk7XG4gIH1cblxufVxuIl19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb2VteWVyc2NvdWdoL0RvY3VtZW50cy9HaXRIdWIvcHRjZy1lcHNkL3B0Y2ctc2VydmVyL3NyYy9zaW1wbGUtYm90L3Byb21wdC1yZXNvbHZlci9jaG9vc2UtY2FyZHMtcHJvbXB0LXJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Nk9BQUEsS0FBQSxDQUFBLE1BQUEsMEJBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLGlCQUFBLDBCQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUEsQ0FDQSxLQUFBLENBQUEscUJBQUEsMEJBQUEsT0FBQSxDQUFBLDhDQUFBLENBQUEsQ0FBQSxDQUdBLEtBQWEsQ0FBQSx5QkFBYixTQUErQyxpQkFBQSxDQUFBLGNBQS9DLENBQTZELENBRXBELGFBQWEsQ0FBQyxLQUFELENBQWUsTUFBZixDQUErQixNQUEvQixDQUFrRCxpREFDcEUsR0FBSSxNQUFNLFdBQVksQ0FBQSxxQkFBQSxDQUFBLGlCQUF0QixDQUF5Qyw0QkFDdkMsR0FBSSxDQUFBLE1BQU0sMEJBQWtCLEtBQUssa0JBQUwsQ0FBd0IsS0FBeEIsQ0FBK0IsTUFBL0IsQ0FBbEIsQ0FBVixDQUR1Qyx3QkFFdkMsTUFBTSxDQUFHLEtBQUssa0JBQUwsQ0FBd0IsTUFBeEIsQ0FBZ0MsTUFBaEMsQ0FBVCxDQUZ1Qyx3QkFHdkMsR0FBSSxNQUFNLENBQUMsTUFBUCxDQUFnQixNQUFNLENBQUMsT0FBUCxDQUFlLEdBQW5DLENBQXdDLG9EQUN0QyxNQUFNLENBQUMsTUFBUCxDQUFnQixNQUFNLENBQUMsT0FBUCxDQUFlLEdBQS9CLENBQ0QsQ0FGRCxpQ0FIdUMseUJBTXZDLEdBQUksTUFBTSxDQUFDLE1BQVAsQ0FBZ0IsTUFBTSxDQUFDLE9BQVAsQ0FBZSxHQUFuQyxDQUF3QyxxREFDdEMsTUFBTSxDQUFHLElBQVQsQ0FDRCxDQUZELGlDQU51Qyx5QkFTdkMsTUFBTyxJQUFJLENBQUEsTUFBQSxDQUFBLG1CQUFKLENBQXdCLE1BQU0sQ0FBQyxFQUEvQixDQUFtQyxNQUFuQyxDQUFQLENBQ0QsQ0FWRCxpQ0FXRCxDQUVPLGtCQUFrQixDQUFDLE1BQUQsQ0FBNEIsS0FBNUIsQ0FBeUMseUJBQ2pFLEtBQU0sQ0FBQSxNQUFNLDJCQUFXLEVBQVgsQ0FBWixDQUVBO0FBQ0EsS0FBTSxDQUFBLE9BQU8sMkJBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxHQUFsQixDQUFiLENBSmlFLHlCQUtqRSxNQUFNLENBQUMsT0FBUCxDQUFlLEdBQWYsQ0FBcUIsQ0FBckIsQ0FFQTtBQVBpRSx5QkFRakUsSUFBSyxLQUFNLENBQUEsSUFBWCxHQUFtQixDQUFBLEtBQW5CLENBQTBCLDBCQUN4QixHQUFJLE1BQU0sQ0FBQyxRQUFQLENBQWdCLENBQUMsR0FBRyxNQUFKLENBQVksSUFBWixDQUFoQixDQUFKLENBQXdDLHFEQUN0QyxNQUFNLENBQUMsSUFBUCxDQUFZLElBQVosRUFDRCxDQUZELGlDQUdELENBWmdFLHlCQWNqRSxNQUFNLENBQUMsT0FBUCxDQUFlLEdBQWYsQ0FBcUIsT0FBckIsQ0FkaUUseUJBZWpFLE1BQU8sQ0FBQSxNQUFQLENBQ0QsQ0FFTyxrQkFBa0IsQ0FBQyxLQUFELENBQWUsTUFBZixDQUF3Qyx5QkFDaEUsS0FBTSxDQUFBLFFBQVEsMkJBQUcsR0FBSSxDQUFBLE1BQUEsQ0FBQSxRQUFKLEVBQUgsQ0FBZCxDQURnRSx5QkFHaEUsUUFBUSxDQUFDLEtBQVQsQ0FBaUIsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFiLENBQW1CLE1BQW5CLENBQTBCLENBQUMsSUFBRCxDQUFPLEtBQVAsR0FBZ0Isa0RBQ3pELE1BQU8sQ0FBQyxNQUFNLENBQUMsT0FBUCxDQUFlLE9BQWYsQ0FBdUIsUUFBdkIsQ0FBZ0MsS0FBaEMsQ0FBUixDQUNELENBRmdCLENBQWpCLENBSUEsS0FBTSxDQUFBLEtBQUssMkJBQUcsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsTUFBTSxDQUFDLE1BQXZCLEVBQStCLEdBQS9CLENBQW1DLElBQUksRUFBRyx5QkFDdEQsS0FBTSxDQUFBLEtBQUssMkJBQUcsS0FBSyxVQUFMLENBQWdCLFlBQWhCLENBQTZCLEtBQTdCLENBQW9DLE1BQU0sQ0FBQyxRQUEzQyxDQUFxRCxJQUFyRCxDQUFILENBQVgsQ0FEc0QseUJBRXRELE1BQU8sQ0FBRSxJQUFGLENBQVEsS0FBUixDQUFQLENBQ0QsQ0FIYSxDQUFILENBQVgsQ0FQZ0UseUJBWWhFLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxDQUFELENBQUksQ0FBSixHQUFVLHdEQUFBLENBQUEsQ0FBQyxDQUFDLEtBQUYsQ0FBVSxDQUFDLENBQUMsS0FBWixDQUFpQixDQUF0QyxFQVpnRSx5QkFhaEUsTUFBTyxDQUFBLEtBQUssQ0FBQyxHQUFOLENBQVUsQ0FBQyxFQUFJLHdEQUFBLENBQUEsQ0FBQyxDQUFDLElBQUYsQ0FBTSxDQUFyQixDQUFQLENBQ0QsQ0FoRDBELEMseUJBQTdELE9BQUEsQ0FBQSx5QkFBQSxDQUFBLHlCQUFBLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbGF5ZXIsIFN0YXRlLCBBY3Rpb24sIFJlc29sdmVQcm9tcHRBY3Rpb24sIFByb21wdCwgQ2FyZCwgQ2FyZExpc3QgfSBmcm9tICcuLi8uLi9nYW1lJztcbmltcG9ydCB7IFByb21wdFJlc29sdmVyIH0gZnJvbSAnLi9wcm9tcHQtcmVzb2x2ZXInO1xuaW1wb3J0IHsgQ2hvb3NlQ2FyZHNQcm9tcHQgfSBmcm9tICcuLi8uLi9nYW1lL3N0b3JlL3Byb21wdHMvY2hvb3NlLWNhcmRzLXByb21wdCc7XG5cblxuZXhwb3J0IGNsYXNzIENob29zZUNhcmRzUHJvbXB0UmVzb2x2ZXIgZXh0ZW5kcyBQcm9tcHRSZXNvbHZlciB7XG5cbiAgcHVibGljIHJlc29sdmVQcm9tcHQoc3RhdGU6IFN0YXRlLCBwbGF5ZXI6IFBsYXllciwgcHJvbXB0OiBQcm9tcHQ8YW55Pik6IEFjdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHByb21wdCBpbnN0YW5jZW9mIENob29zZUNhcmRzUHJvbXB0KSB7XG4gICAgICBsZXQgcmVzdWx0OiBDYXJkW10gfCBudWxsID0gdGhpcy5idWlsZENhcmRzVG9DaG9vc2Uoc3RhdGUsIHByb21wdCk7XG4gICAgICByZXN1bHQgPSB0aGlzLnJlbW92ZUludmFsaWRDYXJkcyhwcm9tcHQsIHJlc3VsdCk7XG4gICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IHByb21wdC5vcHRpb25zLm1heCkge1xuICAgICAgICByZXN1bHQubGVuZ3RoID0gcHJvbXB0Lm9wdGlvbnMubWF4O1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCBwcm9tcHQub3B0aW9ucy5taW4pIHtcbiAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUmVzb2x2ZVByb21wdEFjdGlvbihwcm9tcHQuaWQsIHJlc3VsdCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVJbnZhbGlkQ2FyZHMocHJvbXB0OiBDaG9vc2VDYXJkc1Byb21wdCwgY2FyZHM6IENhcmRbXSk6IENhcmRbXSB7XG4gICAgY29uc3QgcmVzdWx0OiBDYXJkW10gPSBbXTtcblxuICAgIC8vIHRlbXBvcmFyeSByZW1vdmUgbWluIHJlc3RyaWN0aW9uIGZvciB0aGlzIHByb21wdFxuICAgIGNvbnN0IG1pbkNvcHkgPSBwcm9tcHQub3B0aW9ucy5taW47XG4gICAgcHJvbXB0Lm9wdGlvbnMubWluID0gMDtcblxuICAgIC8vIEFkZCBjYXJkIGJ5IGNhcmQgdG8gdGhlIHJlc3VsdHMgYW5kIGNoZWNrIGlmIGl0IGlzIHN0aWxsIHZhbGlkXG4gICAgZm9yIChjb25zdCBjYXJkIG9mIGNhcmRzKSB7XG4gICAgICBpZiAocHJvbXB0LnZhbGlkYXRlKFsuLi5yZXN1bHQsIGNhcmRdKSkge1xuICAgICAgICByZXN1bHQucHVzaChjYXJkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9tcHQub3B0aW9ucy5taW4gPSBtaW5Db3B5O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkQ2FyZHNUb0Nob29zZShzdGF0ZTogU3RhdGUsIHByb21wdDogQ2hvb3NlQ2FyZHNQcm9tcHQpOiBDYXJkW10ge1xuICAgIGNvbnN0IGNhcmRMaXN0ID0gbmV3IENhcmRMaXN0KCk7XG5cbiAgICBjYXJkTGlzdC5jYXJkcyA9IHByb21wdC5jYXJkcy5jYXJkcy5maWx0ZXIoKGNhcmQsIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4gIXByb21wdC5vcHRpb25zLmJsb2NrZWQuaW5jbHVkZXMoaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY2FyZHMgPSBjYXJkTGlzdC5maWx0ZXIocHJvbXB0LmZpbHRlcikubWFwKGNhcmQgPT4ge1xuICAgICAgY29uc3Qgc2NvcmUgPSB0aGlzLnN0YXRlU2NvcmUuZ2V0Q2FyZFNjb3JlKHN0YXRlLCBwcm9tcHQucGxheWVySWQsIGNhcmQpO1xuICAgICAgcmV0dXJuIHsgY2FyZCwgc2NvcmUgfTtcbiAgICB9KTtcblxuICAgIGNhcmRzLnNvcnQoKGEsIGIpID0+IGIuc2NvcmUgLSBhLnNjb3JlKTtcbiAgICByZXR1cm4gY2FyZHMubWFwKGMgPT4gYy5jYXJkKTtcbiAgfVxuXG59XG4iXX0=