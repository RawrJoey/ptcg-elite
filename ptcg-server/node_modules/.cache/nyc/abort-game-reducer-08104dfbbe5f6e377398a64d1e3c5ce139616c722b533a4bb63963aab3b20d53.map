{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/reducers/abort-game-reducer.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/reducers/abort-game-reducer.ts"],"names":[],"mappings":";;;AACA,0CAA8D;AAC9D,iDAA6C;AAC7C,qDAA0D;AAE1D,oEAA+E;AAC/E,kEAA0D;AAC1D,gDAA0C;AAG1C,SAAgB,gBAAgB,CAAC,KAAgB,EAAE,KAAY,EAAE,MAAc;IAE7E,IAAI,KAAK,CAAC,KAAK,KAAK,iBAAS,CAAC,QAAQ,IAAI,MAAM,YAAY,mCAAe,EAAE;QAE3E,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC;QACnE,IAAI,OAAO,KAAK,SAAS,EAAE;YACzB,MAAM,IAAI,sBAAS,CAAC,0BAAW,CAAC,cAAc,CAAC,CAAC;SACjD;QAED,2EAA2E;QAC3E,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC7B,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE;gBAC/B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;QAEH,+BAA+B;QAC/B,QAAQ,MAAM,CAAC,MAAM,EAAE;YACrB,KAAK,mCAAe,CAAC,YAAY;gBAC/B,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAO,CAAC,gBAAgB,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;gBACnE,MAAM;YACR,KAAK,mCAAe,CAAC,aAAa;gBAChC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAO,CAAC,qBAAqB,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;gBACxE,MAAM;YACR,KAAK,mCAAe,CAAC,YAAY;gBAC/B,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAO,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC3E,MAAM;SACT;QAED,kCAAkC;QAClC,IAAI,KAAK,CAAC,KAAK,KAAK,iBAAS,CAAC,mBAAmB,IAAI,KAAK,CAAC,KAAK,KAAK,iBAAS,CAAC,KAAK,EAAE;YACpF,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAO,CAAC,gCAAgC,CAAC,CAAC;YAC3D,KAAK,CAAC,KAAK,GAAG,iBAAS,CAAC,QAAQ,CAAC;YACjC,KAAK,CAAC,MAAM,GAAG,kBAAU,CAAC,IAAI,CAAC;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,yBAAyB;QACzB,MAAM,QAAQ,GAAG,wBAAU,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxD,MAAM,gBAAgB,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;QAChD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;QAElD,+BAA+B;QAC/B,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,gBAAgB,KAAK,iBAAiB,EAAE;YAC7D,KAAK,GAAG,sBAAO,CAAC,KAAK,EAAE,KAAK,EAAE,kBAAU,CAAC,IAAI,CAAC,CAAC;YAC/C,OAAO,KAAK,CAAC;SACd;QAED,4CAA4C;QAC5C,IAAI,iBAAiB,IAAI,gBAAgB,EAAE;YACzC,MAAM,MAAM,GAAG,QAAQ,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC1C,CAAC,CAAC,kBAAU,CAAC,QAAQ;gBACrB,CAAC,CAAC,kBAAU,CAAC,QAAQ,CAAC;YACxB,KAAK,GAAG,sBAAO,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACtC,OAAO,KAAK,CAAC;SACd;QAED,wBAAwB;QACxB,KAAK,GAAG,sBAAO,CAAC,KAAK,EAAE,KAAK,EAAE,kBAAU,CAAC,IAAI,CAAC,CAAC;KAChD;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AA9DD,4CA8DC","sourcesContent":["import { Action } from '../actions/action';\nimport { State, GamePhase, GameWinner } from '../state/state';\nimport { GameError } from '../../game-error';\nimport { GameMessage, GameLog } from '../../game-message';\nimport { StoreLike } from '../store-like';\nimport { AbortGameAction, AbortGameReason} from '../actions/abort-game-action';\nimport { endGame } from '../effect-reducers/check-effect';\nimport {StateUtils} from '../state-utils';\n\n\nexport function abortGameReducer(store: StoreLike, state: State, action: Action): State {\n\n  if (state.phase !== GamePhase.FINISHED && action instanceof AbortGameAction) {\n\n    const culprit = state.players.find(p => p.id === action.culpritId);\n    if (culprit === undefined) {\n      throw new GameError(GameMessage.ILLEGAL_ACTION);\n    }\n\n    // Mark all prompts as resolved, so they won't mess with our state anymore.\n    state.prompts.forEach(prompt => {\n      if (prompt.result === undefined) {\n        prompt.result = null;\n      }\n    });\n\n    // Explain why game was aborted\n    switch (action.reason) {\n      case AbortGameReason.TIME_ELAPSED:\n        store.log(state, GameLog.LOG_TIME_ELAPSED, { name: culprit.name });\n        break;\n      case AbortGameReason.ILLEGAL_MOVES:\n        store.log(state, GameLog.LOG_BANNED_BY_ARBITER, { name: culprit.name });\n        break;\n      case AbortGameReason.DISCONNECTED:\n        store.log(state, GameLog.LOG_PLAYER_LEFT_THE_GAME, { name: culprit.name });\n        break;\n    }\n\n    // Game has not started, no winner\n    if (state.phase === GamePhase.WAITING_FOR_PLAYERS || state.phase === GamePhase.SETUP) {\n      store.log(state, GameLog.LOG_GAME_FINISHED_BEFORE_STARTED);\n      state.phase = GamePhase.FINISHED;\n      state.winner = GameWinner.NONE;\n      return state;\n    }\n\n    // Let's decide who wins.\n    const opponent = StateUtils.getOpponent(state, culprit);\n    const culpritPrizeLeft = culprit.getPrizeLeft();\n    const opponentPrizeLeft = opponent.getPrizeLeft();\n\n    // It was first turn, no winner\n    if (state.turn <= 2 && culpritPrizeLeft === opponentPrizeLeft) {\n      state = endGame(store, state, GameWinner.NONE);\n      return state;\n    }\n\n    // Opponent has same or less prizes, he wins\n    if (opponentPrizeLeft <= culpritPrizeLeft) {\n      const winner = opponent === state.players[0]\n        ? GameWinner.PLAYER_1\n        : GameWinner.PLAYER_2;\n      state = endGame(store, state, winner);\n      return state;\n    }\n\n    // Otherwise it's a draw\n    state = endGame(store, state, GameWinner.DRAW);\n  }\n\n  return state;\n}\n"]}