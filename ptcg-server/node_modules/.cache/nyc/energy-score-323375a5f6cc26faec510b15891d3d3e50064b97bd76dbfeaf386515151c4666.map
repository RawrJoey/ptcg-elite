{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/state-score/energy-score.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/state-score/energy-score.ts"],"names":[],"mappings":"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","sourcesContent":["import { State, PokemonCardList, CardType, EnergyCard, PlayerType } from '../../game';\nimport { SimpleScore } from './score';\n\nexport class EnergyScore extends SimpleScore {\n\n  public getScore(state: State, playerId: number): number {\n    const player = this.getPlayer(state, playerId);\n    const scores = this.options.scores.energy;\n    let score = 0;\n\n    player.forEachPokemon(PlayerType.BOTTOM_PLAYER, (cardList, pokemon, target) => {\n      let missing: CardType[] = this.getMissingEnergies(cardList, pokemon.retreat);\n      pokemon.attacks.forEach(a => {\n        const missing2 = this.getMissingEnergies(cardList, a.cost);\n        missing = this.mergeMissing(missing, missing2);\n      });\n\n      const multipier = cardList === player.active\n        ? scores.active\n        : scores.bench;\n\n      missing.forEach(p => {\n        score += p === CardType.ANY\n          ? scores.missingColorless * multipier\n          : scores.missingMatch * multipier;\n      });\n    });\n\n    return score;\n  }\n\n  private mergeMissing(missing1: CardType[], missing2: CardType[]): CardType[] {\n    let any1 = 0;\n    missing1.forEach(c => { any1 += c === CardType.ANY ? 1 : 0; });\n    missing1 = missing1.filter(c => c !== CardType.ANY);\n    let any2 = 0;\n    missing2.forEach(c => { any2 += c === CardType.ANY ? 1 : 0; });\n    missing2 = missing2.filter(c => c !== CardType.ANY);\n\n    missing1.forEach(c => {\n      const index = missing2.indexOf(c);\n      if (index !== -1) {\n        missing2.splice(index, 1);\n      } else if (any2 > 0) {\n        any2 -= 1;\n      }\n    });\n\n    missing2.forEach(c => {\n      missing1.push(c);\n    });\n\n    const max = Math.max(any1, any2);\n    for (let i = 0; i < max ; i++) {\n      missing1.push(CardType.ANY);\n    }\n\n    return missing1;\n  }\n\n\n  private getMissingEnergies(cardList: PokemonCardList, cost: CardType[]): CardType[] {\n    if (cost.length === 0) {\n      return [];\n    }\n\n    const provided: CardType[] = [];\n    cardList.cards.forEach(card => {\n      if (card instanceof EnergyCard) {\n        card.provides.forEach(energy => provided.push(energy));\n      }\n    });\n\n    const missing: CardType[] = [];\n    let colorless = 0;\n    // First remove from array cards with specific energy types\n    cost.forEach(costType => {\n      switch (costType) {\n        case CardType.ANY:\n        case CardType.NONE:\n          break;\n        case CardType.COLORLESS:\n          colorless += 1;\n          break;\n        default: {\n          const index = provided.findIndex(energy => energy === costType);\n          if (index !== -1) {\n            provided.splice(index, 1);\n          } else {\n            missing.push(costType);\n          }\n        }\n      }\n    });\n\n    colorless -= provided.length;\n\n    for (let i = 0; i < colorless; i++) {\n      missing.push(CardType.ANY);\n    }\n\n    return missing;\n  }\n\n}\n"]}