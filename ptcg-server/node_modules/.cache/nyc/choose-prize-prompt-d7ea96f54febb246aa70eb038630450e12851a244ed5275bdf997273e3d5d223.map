{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-prize-prompt.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-prize-prompt.ts"],"names":[],"mappings":";;;AACA,qCAAkC;AAElC,iDAA6C;AAC7C,qDAAiD;AAEpC,QAAA,qBAAqB,GAAG,cAAc,CAAC;AAOpD,MAAa,iBAAkB,SAAQ,eAAkB;IAMvD,YACE,QAAgB,EACT,OAAoB,EAC3B,OAAqC;QAErC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAHT,YAAO,GAAP,OAAO,CAAa;QANpB,SAAI,GAAW,6BAAqB,CAAC;QAW5C,kBAAkB;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;YAC/B,KAAK,EAAE,CAAC;YACR,WAAW,EAAE,KAAK;SACnB,EAAE,OAAO,CAAC,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,MAAuB,EAAE,KAAY;QACjD,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,OAAO,MAAM,CAAC;SACf;QACD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,sBAAS,CAAC,0BAAW,CAAC,qBAAqB,CAAC,CAAC;SACxD;QACD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC7D,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEM,QAAQ,CAAC,MAAyB;QACvC,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;SACjC;QACD,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YACxC,OAAO,KAAK,CAAC;SACd;QACD,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;YAC7C,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,IAAI,aAAa,EAAE;YACjB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;QACxD,IAAI,QAAQ,EAAE;YACZ,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CAEF;AApDD,8CAoDC","sourcesContent":["import { CardList } from '../state/card-list';\nimport { Prompt } from './prompt';\nimport { State } from '../state/state';\nimport { GameError } from '../../game-error';\nimport { GameMessage } from '../../game-message';\n\nexport const ChoosePrizePromptType = 'Choose prize';\n\nexport interface ChoosePrizeOptions {\n  count: number;\n  allowCancel: boolean;\n}\n\nexport class ChoosePrizePrompt extends Prompt<CardList[]> {\n\n  readonly type: string = ChoosePrizePromptType;\n\n  public options: ChoosePrizeOptions;\n\n  constructor(\n    playerId: number,\n    public message: GameMessage,\n    options?: Partial<ChoosePrizeOptions>\n  ) {\n    super(playerId);\n\n    // Default options\n    this.options = Object.assign({}, {\n      count: 1,\n      allowCancel: false\n    }, options);\n  }\n\n  public decode(result: number[] | null, state: State): CardList[] | null {\n    if (result === null) {\n      return result;\n    }\n    const player = state.players.find(p => p.id === this.playerId);\n    if (player === undefined) {\n      throw new GameError(GameMessage.INVALID_PROMPT_RESULT);\n    }\n    const prizes = player.prizes.filter(p => p.cards.length > 0);\n    return result.map(index => prizes[index]);\n  }\n\n  public validate(result: CardList[] | null): boolean {\n    if (result === null) {\n      return this.options.allowCancel;\n    }\n    if (result.length !== this.options.count) {\n      return false;\n    }\n    const hasDuplicates = result.some((p, index) => {\n      return result.indexOf(p) !== index;\n    });\n    if (hasDuplicates) {\n      return false;\n    }\n    const hasEmpty = result.some(p => p.cards.length === 0);\n    if (hasEmpty) {\n      return false;\n    }\n    return true;\n  }\n\n}\n"]}