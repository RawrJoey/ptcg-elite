{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-attack-prompt.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-attack-prompt.ts"],"names":[],"mappings":";;;AAAA,iDAA6C;AAC7C,qDAAiD;AACjD,qCAAkC;AAKrB,QAAA,sBAAsB,GAAG,eAAe,CAAC;AAUtD,MAAa,kBAAmB,SAAQ,eAAc;IAMpD,YACE,QAAgB,EACT,OAAoB,EACpB,KAAoB,EAC3B,OAAsC;QAEtC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAJT,YAAO,GAAP,OAAO,CAAa;QACpB,UAAK,GAAL,KAAK,CAAe;QAPpB,SAAI,GAAW,8BAAsB,CAAC;QAY7C,kBAAkB;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;YAC/B,WAAW,EAAE,KAAK;YAClB,cAAc,EAAE,0BAAW,CAAC,iBAAiB;YAC7C,OAAO,EAAE,EAAE;SACZ,EAAE,OAAO,CAAC,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,MAAqC,EAAE,KAAY;QAC/D,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,OAAO,MAAM,CAAC,CAAE,sBAAsB;SACvC;QACD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC3B,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAC3C,MAAM,IAAI,sBAAS,CAAC,0BAAW,CAAC,qBAAqB,CAAC,CAAC;SACxD;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,CAAC;QAChE,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,sBAAS,CAAC,0BAAW,CAAC,qBAAqB,CAAC,CAAC;SACxD;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,QAAQ,CAAC,MAAqB;QACnC,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAE,sBAAsB;SACzD;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;gBACxB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;aACpD;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC5B,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,CAAC;CAEF;AAzDD,gDAyDC","sourcesContent":["import { GameError } from '../../game-error';\nimport { GameMessage } from '../../game-message';\nimport { Prompt } from './prompt';\nimport { State } from '../state/state';\nimport { PokemonCard } from '../card/pokemon-card';\nimport { Attack } from '../card/pokemon-types';\n\nexport const ChooseAttackPromptType = 'Choose attack';\n\nexport interface ChooseAttackOptions {\n  allowCancel: boolean;\n  blockedMessage: GameMessage;\n  blocked: { index: number; attack: string }[];\n}\n\nexport type ChooseAttackResultType = {index: number, attack: string};\n\nexport class ChooseAttackPrompt extends Prompt<Attack> {\n\n  readonly type: string = ChooseAttackPromptType;\n\n  public options: ChooseAttackOptions;\n\n  constructor(\n    playerId: number,\n    public message: GameMessage,\n    public cards: PokemonCard[],\n    options?: Partial<ChooseAttackOptions>\n  ) {\n    super(playerId);\n\n    // Default options\n    this.options = Object.assign({}, {\n      allowCancel: false,\n      blockedMessage: GameMessage.NOT_ENOUGH_ENERGY,\n      blocked: []\n    }, options);\n  }\n\n  public decode(result: ChooseAttackResultType | null, state: State): Attack | null {\n    if (result === null) {\n      return result;  // operation cancelled\n    }\n    const index = result.index;\n    if (index < 0 || index >= this.cards.length) {\n      throw new GameError(GameMessage.INVALID_PROMPT_RESULT);\n    }\n    const card = this.cards[index];\n    const attack = card.attacks.find(a => a.name === result.attack);\n    if (attack === undefined) {\n      throw new GameError(GameMessage.INVALID_PROMPT_RESULT);\n    }\n    return attack;\n  }\n\n  public validate(result: Attack | null): boolean {\n    if (result === null) {\n      return this.options.allowCancel;  // operation cancelled\n    }\n\n    const blocked = this.options.blocked.map(b => {\n      const card = this.cards[b.index];\n      if (card && card.attacks) {\n        return card.attacks.find(a => a.name === b.attack);\n      }\n    });\n\n    if (blocked.includes(result)) {\n      return false;\n    }\n\n    return this.cards.some(c => c.attacks.includes(result));\n  }\n\n}\n"]}