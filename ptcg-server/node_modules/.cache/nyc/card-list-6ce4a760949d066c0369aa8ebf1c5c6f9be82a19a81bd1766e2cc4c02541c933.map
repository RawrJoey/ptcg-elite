{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/state/card-list.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/state/card-list.ts"],"names":[],"mappings":"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","sourcesContent":["import { Card } from '../card/card';\nimport { CardManager } from '../../cards/card-manager';\nimport { GameError } from '../../game-error';\nimport { GameMessage } from '../../game-message';\n\nexport class CardList {\n\n  public cards: Card[] = [];\n\n  public isPublic: boolean = false;\n\n  public isSecret: boolean = false;\n\n  public static fromList(names: string[]): CardList {\n    const cardList = new CardList();\n    const cardManager = CardManager.getInstance();\n    cardList.cards = names.map(cardName => {\n      const card = cardManager.getCardByName(cardName);\n      if (card === undefined) {\n        throw new GameError(GameMessage.UNKNOWN_CARD, cardName);\n      }\n      return card;\n    });\n    return cardList;\n  }\n\n  public applyOrder(order: number[]) {\n    // Check if order is valid, same length\n    if (this.cards.length !== order.length) {\n      return;\n    }\n    // Contains all elements exacly one time\n    const orderCopy = order.slice();\n    orderCopy.sort((a, b) => a - b);\n    for (let i = 0; i < orderCopy.length; i++) {\n      if (i !== orderCopy[i]) {\n        return;\n      }\n    }\n    // Apply order\n    const copy = this.cards.slice();\n    for (let i = 0; i < order.length; i++) {\n      this.cards[i] = copy[order[i]];\n    }\n  }\n\n  public moveTo(destination: CardList, count?: number): void {\n    if (count === undefined) {\n      count = this.cards.length;\n    }\n\n    count = Math.min(count, this.cards.length);\n    const cards = this.cards.splice(0, count);\n    destination.cards.push(...cards);\n  }\n\n  public moveCardsTo(cards: Card[], destination: CardList): void {\n    for (let i = 0; i < cards.length; i++) {\n      const index = this.cards.indexOf(cards[i]);\n      if (index !== -1) {\n        const card = this.cards.splice(index, 1);\n        destination.cards.push(card[0]);\n      }\n    }\n  }\n\n  public moveCardTo(card: Card, destination: CardList): void {\n    this.moveCardsTo([card], destination);\n  }\n\n  public top(count: number = 1): Card[] {\n    count = Math.min(count, this.cards.length);\n    return this.cards.slice(0, count);\n  }\n\n  public filter(query: Partial<Card>): Card[] {\n    return this.cards.filter(c => {\n      for (const key in query) {\n        if (Object.prototype.hasOwnProperty.call(query, key)) {\n          const value: any = (c as any)[key];\n          const expected: any = (query as any)[key];\n          if (value !== expected) {\n            return false;\n          }\n        }\n      }\n      return true;\n    });\n  }\n\n  public count(query: Partial<Card>): number {\n    return this.filter(query).length;\n  }\n\n}\n"]}