{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-cards-prompt.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-cards-prompt.ts"],"names":[],"mappings":"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","sourcesContent":["import { Card } from '../card/card';\nimport { CardList } from '../state/card-list';\nimport { EnergyCard } from '../card/energy-card';\nimport { GameMessage } from '../../game-message';\nimport { Prompt } from './prompt';\nimport { PokemonCard } from '../card/pokemon-card';\nimport { TrainerCard } from '../card/trainer-card';\nimport { CardType, SuperType } from '../card/card-types';\n\nexport const ChooseCardsPromptType = 'Choose cards';\n\nexport interface ChooseCardsOptions {\n  min: number;\n  max: number;\n  allowCancel: boolean;\n  blocked: number[];\n  isSecret: boolean;\n  differentTypes: boolean;\n  maxPokemons: number | undefined;\n  maxEnergies: number | undefined;\n  maxTrainers: number | undefined;\n}\n\nexport type FilterType = Partial<PokemonCard | TrainerCard | EnergyCard>;\n\nexport class ChooseCardsPrompt extends Prompt<Card[]> {\n\n  readonly type: string = ChooseCardsPromptType;\n  \n  public options: ChooseCardsOptions;\n\n  constructor(\n    playerId: number,\n    public message: GameMessage,\n    public cards: CardList,\n    public filter: FilterType,\n    options?: Partial<ChooseCardsOptions>\n  ) {\n    super(playerId);\n\n    // Default options\n    this.options = Object.assign({}, {\n      min: 0,\n      max: cards.cards.length,\n      allowCancel: true,\n      blocked: [],\n      isSecret: false,\n      differentTypes: false,\n      maxPokemons: undefined,\n      maxEnergies: undefined,\n      maxTrainers: undefined\n    }, options);\n  }\n\n  public decode(result: number[] | null): Card[] | null {\n    if (result === null) {\n      return null;\n    }\n    const cards: Card[] = this.cards.cards;\n    return result.map(index => cards[index]);\n  }\n\n  public validate(result: Card[] | null): boolean {\n    if (result === null) {\n      return this.options.allowCancel;\n    }\n    if (result.length < this.options.min || result.length > this.options.max) {\n      return false;\n    }\n\n    // Check if 'different types' restriction is valid\n    if (this.options.differentTypes) {\n      const typeMap: {[key: number]: boolean} = {};\n      for (const card of result) {\n        const cardType = ChooseCardsPrompt.getCardType(card);\n        if (typeMap[cardType] === true) {\n          return false;\n        } else {\n          typeMap[cardType] = true;\n        }\n      }\n    }\n\n    // Check if 'max' restrictions are valid\n    const countMap: {[key: number]: number} = {};\n    for (const card of result) {\n      const count = countMap[card.superType] || 0;\n      countMap[card.superType] = count + 1;\n    }\n    const { maxPokemons, maxEnergies, maxTrainers } = this.options;\n    if ((maxPokemons !== undefined && maxPokemons < countMap[SuperType.POKEMON])\n      || (maxEnergies !== undefined && maxEnergies < countMap[SuperType.ENERGY])\n      || (maxTrainers !== undefined && maxTrainers < countMap[SuperType.TRAINER])) {\n      return false;\n    }\n\n    const blocked = this.options.blocked;\n    return result.every(r => {\n      const index = this.cards.cards.indexOf(r);\n      return index !== -1 && !blocked.includes(index) && this.matchesFilter(r);\n    });\n  }\n\n  public static getCardType(card: Card): CardType {\n    if (card.superType === SuperType.ENERGY) {\n      const energyCard = card as EnergyCard;\n      return energyCard.provides.length > 0 ? energyCard.provides[0] : CardType.NONE;\n    }\n    if (card.superType === SuperType.POKEMON) {\n      const pokemonCard = card as PokemonCard;\n      return pokemonCard.cardType;\n    }\n    return CardType.NONE;\n  }\n\n  private matchesFilter(card: Card): boolean {\n    for (const key in this.filter) {\n      if (Object.prototype.hasOwnProperty.call(this.filter, key)) {\n        if ((this.filter as any)[key] !== (card as any)[key]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n}\n"]}