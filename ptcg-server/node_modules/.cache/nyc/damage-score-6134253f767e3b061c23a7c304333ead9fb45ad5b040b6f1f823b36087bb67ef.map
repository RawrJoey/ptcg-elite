{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/state-score/damage-score.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/state-score/damage-score.ts"],"names":[],"mappings":";;;AAAA,qCAAqE;AACrE,mCAAsC;AAEtC,MAAa,WAAY,SAAQ,mBAAW;IAEnC,QAAQ,CAAC,KAAY,EAAE,QAAgB;QAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,iBAAU,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAEvD,IAAI,eAAe,GAAG,CAAC,CAAC;QACxB,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,MAAM,CAAC,cAAc,CAAC,iBAAU,CAAC,aAAa,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;YACzE,MAAM,CAAE,aAAa,EAAE,SAAS,CAAE,GAAG,MAAM,CAAC,IAAI,KAAK,eAAQ,CAAC,MAAM;gBAClE,CAAC,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAE;gBACzE,CAAC,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAE,CAAC;YAE1E,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YACrE,eAAe,IAAI,YAAY,CAAC;YAChC,KAAK,IAAI,SAAS,GAAG,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,cAAc,CAAC,iBAAU,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;YACxE,MAAM,CAAE,aAAa,EAAE,SAAS,CAAE,GAAG,MAAM,CAAC,IAAI,KAAK,eAAQ,CAAC,MAAM;gBAClE,CAAC,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAE;gBAC3E,CAAC,CAAC,CAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAE,CAAC;YAE5E,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YACrE,eAAe,IAAI,YAAY,CAAC;YAChC,KAAK,IAAI,SAAS,GAAG,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,eAAe,CAAC,CAAC;QAC5C,OAAO,KAAK,CAAC;IACf,CAAC;CAEF;AAjCD,kCAiCC","sourcesContent":["import { State, StateUtils, PlayerType, SlotType } from '../../game';\nimport { SimpleScore } from './score';\n\nexport class DamageScore extends SimpleScore {\n\n  public getScore(state: State, playerId: number): number {\n    const player = this.getPlayer(state, playerId);\n    const opponent = StateUtils.getOpponent(state, player);\n\n    let pokemonScoreSum = 0;\n    let score = 0;\n\n    player.forEachPokemon(PlayerType.BOTTOM_PLAYER, (cardList, card, target) => {\n      const [ pokemonScores, multipier ] = target.slot === SlotType.ACTIVE\n        ? [ this.options.scores.active, this.options.scores.damage.playerActive ]\n        : [ this.options.scores.bench, this.options.scores.damage.playerBench ];\n\n      const pokemonScore = this.getPokemonScoreBy(pokemonScores, cardList);\n      pokemonScoreSum += pokemonScore;\n      score += multipier * pokemonScore * cardList.damage;\n    });\n\n    opponent.forEachPokemon(PlayerType.TOP_PLAYER, (cardList, card, target) => {\n      const [ pokemonScores, multipier ] = target.slot === SlotType.ACTIVE\n        ? [ this.options.scores.active, this.options.scores.damage.opponentActive ]\n        : [ this.options.scores.bench, this.options.scores.damage.opponentBench ];\n\n      const pokemonScore = this.getPokemonScoreBy(pokemonScores, cardList);\n      pokemonScoreSum += pokemonScore;\n      score += multipier * pokemonScore * cardList.damage;\n    });\n\n    score = Math.round(score / pokemonScoreSum);\n    return score;\n  }\n\n}\n"]}