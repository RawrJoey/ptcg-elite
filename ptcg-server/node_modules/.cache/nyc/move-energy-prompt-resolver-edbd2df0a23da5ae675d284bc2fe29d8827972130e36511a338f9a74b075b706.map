{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/move-energy-prompt-resolver.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/move-energy-prompt-resolver.ts"],"names":[],"mappings":"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","sourcesContent":["import { Player, State, Action, ResolvePromptAction, Prompt, StateUtils,\n  PlayerType, CardList, Card, CardTarget, MoveEnergyPrompt, CardTransfer } from '../../game';\nimport { PromptResolver } from './prompt-resolver';\nimport { deepClone } from '../../utils/utils';\n\ninterface TransferItem {\n  fromItem: FromItem;\n  toCardList: CardList;\n  to: CardTarget;\n  score: number;\n}\n\ninterface TargetList {\n  cardList: CardList;\n  target: CardTarget;\n}\n\ninterface FromItem {\n  fromCardList: CardList;\n  from: CardTarget;\n  card: Card;\n  cardIndex: number;\n}\n\nexport class MoveEnergyPromptResolver extends PromptResolver {\n\n  public resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action | undefined {\n    if (prompt instanceof MoveEnergyPrompt) {\n      const result = this.getPromptResult(state, prompt);\n      return new ResolvePromptAction(prompt.id, result);\n    }\n  }\n\n  private getPromptResult(state: State, prompt: MoveEnergyPrompt): CardTransfer[] | null {\n    const copy = deepClone(state, [ Card ]);\n    const fromItems = this.buildFromCardItems(copy, prompt);\n\n    const max = prompt.options.max;\n    const min = prompt.options.min;\n    const result: TransferItem[] = [];\n\n    let prevScore = this.getStateScore(state, prompt.playerId);\n    let isNegative = false;\n\n    while (fromItems.length > 0 && (!isNegative || result.length < min)) {\n      const transfers = this.buildTransferItems(copy, prompt, fromItems);\n      transfers.sort((a, b) => b.score - a.score);\n      if (transfers.length === 0) {\n        break;\n      }\n\n      const best = transfers[0];\n      const fromIndex = fromItems.indexOf(best.fromItem);\n\n      fromItems.splice(fromIndex, 1);\n\n      if (best.score < prevScore) {\n        isNegative = true;\n      }\n\n      // Moving any card gives negative score, and we are able to cancel\n      // Don't append any results, just cancel the prompt\n      if (isNegative && prompt.options.allowCancel) {\n        break;\n      }\n\n      // Score is negative, and we already have minimum transfers\n      if (isNegative && result.length >= min) {\n        break;\n      }\n\n      const source = best.fromItem.fromCardList;\n      const target = best.toCardList;\n      const card = best.fromItem.card;\n      source.moveCardTo(card, target);\n      result.push(best);\n      prevScore = best.score;\n\n      if (max !== undefined && result.length >= max) {\n        break;\n      }\n    }\n\n    if (result.length === 0 && prompt.options.allowCancel) {\n      return null;\n    }\n\n    if (result.length < min && prompt.options.allowCancel) {\n      return null;\n    }\n\n    return this.translateItems(state, prompt, result);\n  }\n\n  private translateItems(state: State, prompt: MoveEnergyPrompt, items: TransferItem[]): CardTransfer[] {\n    const player = state.players.find(p => p.id === prompt.playerId);\n    if (player === undefined) {\n      return [];\n    }\n\n    return items.map(item => {\n      const cardList = StateUtils.getTarget(state, player, item.fromItem.from);\n      const card = cardList.cards[item.fromItem.cardIndex];\n      return {\n        from: item.fromItem.from,\n        to: item.to,\n        card\n      };\n    });\n  }\n\n  private buildTransferItems(state: State, prompt: MoveEnergyPrompt, fromCardItems: FromItem[]): TransferItem[] {\n    const results: TransferItem[] = [];\n\n    fromCardItems.forEach(item => {\n      const fromCardList = item.fromCardList;\n      const cardTargets = this.getTargets(state, prompt, prompt.options.blockedTo);\n      for (const cardTarget of cardTargets) {\n        if (cardTarget.cardList !== fromCardList) {\n          fromCardList.moveCardTo(item.card, cardTarget.cardList);\n          results.push({\n            fromItem: item,\n            to: cardTarget.target,\n            toCardList: cardTarget.cardList,\n            score: this.getStateScore(state, prompt.playerId)\n          });\n          cardTarget.cardList.moveCardTo(item.card, fromCardList);\n        }\n      }\n    });\n\n    return results;\n  }\n\n  private buildFromCardItems(state: State, prompt: MoveEnergyPrompt): FromItem[] {\n    const fromCardItems: FromItem[] = [];\n\n    const fromTargets = this.getTargets(state, prompt, prompt.options.blockedFrom);\n    fromTargets.forEach(fromTarget => {\n      const blockedMap = prompt.options.blockedMap.find(b => {\n        return b.source.player === fromTarget.target.player\n          && b.source.slot === fromTarget.target.slot\n          && b.source.index === fromTarget.target.index;\n      });\n      const blocked = blockedMap ? blockedMap.blocked : [];\n      const cardList = new CardList();\n      fromTarget.cardList.cards.forEach((card, index) => {\n        if (!blocked.includes(index)) {\n          cardList.cards.push(card);\n        }\n      });\n      cardList.cards = cardList.filter(prompt.filter);\n      cardList.cards.forEach(card => {\n        fromCardItems.push({\n          fromCardList: fromTarget.cardList,\n          from: fromTarget.target,\n          card: card,\n          cardIndex: fromTarget.cardList.cards.indexOf(card)\n        });\n      });\n    });\n    return fromCardItems;\n  }\n\n  private getTargets(state: State, prompt: MoveEnergyPrompt, blocked: CardTarget[]): TargetList[] {\n    const player = state.players.find(p => p.id === prompt.playerId);\n    const opponent = state.players.find(p => p.id !== prompt.playerId);\n    if (player === undefined || opponent === undefined) {\n      return [];\n    }\n    const hasOpponent = [PlayerType.TOP_PLAYER, PlayerType.ANY].includes(prompt.playerType);\n    const hasPlayer = [PlayerType.BOTTOM_PLAYER, PlayerType.ANY].includes(prompt.playerType);\n    let results: TargetList[] = [];\n    if (hasOpponent) {\n      opponent.forEachPokemon(PlayerType.TOP_PLAYER, (cardList, card, target) => {\n        if (prompt.slots.includes(target.slot)) {\n          results.push({ target, cardList });\n        }\n      });\n    }\n    if (hasPlayer) {\n      player.forEachPokemon(PlayerType.BOTTOM_PLAYER, (cardList, card, target) => {\n        if (prompt.slots.includes(target.slot)) {\n          results.push({ target, cardList });\n        }\n      });\n    }\n\n    const blockedList: CardList[] = blocked.map(b => StateUtils.getTarget(state, player, b));\n    results = results.filter(i => !blockedList.includes(i.cardList));\n    return results;\n  }\n\n}\n"]}