{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-cards-prompt-resolver.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/simple-bot/prompt-resolver/choose-cards-prompt-resolver.ts"],"names":[],"mappings":";;;AAAA,qCAAgG;AAChG,uDAAmD;AACnD,sFAAiF;AAGjF,MAAa,yBAA0B,SAAQ,gCAAc;IAEpD,aAAa,CAAC,KAAY,EAAE,MAAc,EAAE,MAAmB;QACpE,IAAI,MAAM,YAAY,uCAAiB,EAAE;YACvC,IAAI,MAAM,GAAkB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACnE,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACjD,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;gBACtC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;aACpC;YACD,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;gBACtC,MAAM,GAAG,IAAI,CAAC;aACf;YACD,OAAO,IAAI,0BAAmB,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;SACnD;IACH,CAAC;IAEO,kBAAkB,CAAC,MAAyB,EAAE,KAAa;QACjE,MAAM,MAAM,GAAW,EAAE,CAAC;QAE1B,mDAAmD;QACnD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC;QAEvB,iEAAiE;QACjE,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,CAAC,EAAE;gBACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;SACF;QAED,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC;QAC7B,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,kBAAkB,CAAC,KAAY,EAAE,MAAyB;QAChE,MAAM,QAAQ,GAAG,IAAI,eAAQ,EAAE,CAAC;QAEhC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YACzD,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACtD,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACzE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;CAEF;AAlDD,8DAkDC","sourcesContent":["import { Player, State, Action, ResolvePromptAction, Prompt, Card, CardList } from '../../game';\nimport { PromptResolver } from './prompt-resolver';\nimport { ChooseCardsPrompt } from '../../game/store/prompts/choose-cards-prompt';\n\n\nexport class ChooseCardsPromptResolver extends PromptResolver {\n\n  public resolvePrompt(state: State, player: Player, prompt: Prompt<any>): Action | undefined {\n    if (prompt instanceof ChooseCardsPrompt) {\n      let result: Card[] | null = this.buildCardsToChoose(state, prompt);\n      result = this.removeInvalidCards(prompt, result);\n      if (result.length > prompt.options.max) {\n        result.length = prompt.options.max;\n      }\n      if (result.length < prompt.options.min) {\n        result = null;\n      }\n      return new ResolvePromptAction(prompt.id, result);\n    }\n  }\n\n  private removeInvalidCards(prompt: ChooseCardsPrompt, cards: Card[]): Card[] {\n    const result: Card[] = [];\n\n    // temporary remove min restriction for this prompt\n    const minCopy = prompt.options.min;\n    prompt.options.min = 0;\n\n    // Add card by card to the results and check if it is still valid\n    for (const card of cards) {\n      if (prompt.validate([...result, card])) {\n        result.push(card);\n      }\n    }\n\n    prompt.options.min = minCopy;\n    return result;\n  }\n\n  private buildCardsToChoose(state: State, prompt: ChooseCardsPrompt): Card[] {\n    const cardList = new CardList();\n\n    cardList.cards = prompt.cards.cards.filter((card, index) => {\n      return !prompt.options.blocked.includes(index);\n    });\n\n    const cards = cardList.filter(prompt.filter).map(card => {\n      const score = this.stateScore.getCardScore(state, prompt.playerId, card);\n      return { card, score };\n    });\n\n    cards.sort((a, b) => b.score - a.score);\n    return cards.map(c => c.card);\n  }\n\n}\n"]}