{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-pokemon-prompt.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/prompts/choose-pokemon-prompt.ts"],"names":[],"mappings":";;;AAAA,qCAAkC;AAClC,kEAA+E;AAG/E,iDAA6C;AAC7C,qDAAiD;AACjD,gDAA4C;AAE/B,QAAA,uBAAuB,GAAG,gBAAgB,CAAC;AASxD,MAAa,mBAAoB,SAAQ,eAAyB;IAMhE,YACE,QAAgB,EACT,OAAoB,EACpB,UAAsB,EACtB,KAAiB,EACxB,OAAuC;QAEvC,KAAK,CAAC,QAAQ,CAAC,CAAC;QALT,YAAO,GAAP,OAAO,CAAa;QACpB,eAAU,GAAV,UAAU,CAAY;QACtB,UAAK,GAAL,KAAK,CAAY;QARjB,SAAI,GAAW,+BAAuB,CAAC;QAa9C,kBAAkB;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;YAC/B,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,CAAC;YACN,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,EAAE;SACZ,EAAE,OAAO,CAAC,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,MAA2B,EAAE,KAAY;QACrD,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,OAAO,MAAM,CAAC,CAAE,sBAAsB;SACvC;QACD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,MAAM,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS,EAAE;YAClD,MAAM,IAAI,sBAAS,CAAC,0BAAW,CAAC,qBAAqB,CAAC,CAAC;SACxD;QACD,OAAO,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACzB,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,KAAK,6BAAU,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;YACzE,OAAO,MAAM,CAAC,IAAI,KAAK,2BAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,QAAQ,CAAC,MAAgC,EAAE,KAAY;QAC5D,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;SACjC;QACD,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YACxE,OAAO,KAAK,CAAC;SACd;QACD,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;YACxD,OAAO,KAAK,CAAC;SACd;QACD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,wBAAU,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QACtF,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;YACzC,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CAEF;AA5DD,kDA4DC","sourcesContent":["import { Prompt } from './prompt';\nimport { PlayerType, SlotType, CardTarget } from '../actions/play-card-action';\nimport { PokemonCardList } from '../state/pokemon-card-list';\nimport { State } from '../state/state';\nimport { GameError } from '../../game-error';\nimport { GameMessage } from '../../game-message';\nimport { StateUtils } from '../state-utils';\n\nexport const ChoosePokemonPromptType = 'Choose pokemon';\n\nexport interface ChoosePokemonOptions {\n  min: number;\n  max: number;\n  allowCancel: boolean;\n  blocked: CardTarget[];\n}\n\nexport class ChoosePokemonPrompt extends Prompt<PokemonCardList[]> {\n\n  readonly type: string = ChoosePokemonPromptType;\n\n  public options: ChoosePokemonOptions;\n\n  constructor(\n    playerId: number,\n    public message: GameMessage,\n    public playerType: PlayerType,\n    public slots: SlotType[],\n    options?: Partial<ChoosePokemonOptions>\n  ) {\n    super(playerId);\n\n    // Default options\n    this.options = Object.assign({}, {\n      min: 1,\n      max: 1,\n      allowCancel: true,\n      blocked: []\n    }, options);\n  }\n\n  public decode(result: CardTarget[] | null, state: State): PokemonCardList[] | null {\n    if (result === null) {\n      return result;  // operation cancelled\n    }\n    const player = state.players.find(p => p.id === this.playerId);\n    const opponent = state.players.find(p => p.id !== this.playerId);\n    if (player === undefined || opponent === undefined) {\n      throw new GameError(GameMessage.INVALID_PROMPT_RESULT);\n    }\n    return result.map(target => {\n      const p = target.player === PlayerType.BOTTOM_PLAYER ? player : opponent;\n      return target.slot === SlotType.ACTIVE ? p.active : p.bench[target.index];\n    });\n  }\n\n  public validate(result: PokemonCardList[] | null, state: State): boolean {\n    if (result === null) {\n      return this.options.allowCancel;\n    }\n    if (result.length < this.options.min || result.length > this.options.max) {\n      return false;\n    }\n    if (result.some(cardList => cardList.cards.length === 0)) {\n      return false;\n    }\n    const player = state.players.find(p => p.id === this.playerId);\n    if (player === undefined) {\n      return false;\n    }\n    const blocked = this.options.blocked.map(b => StateUtils.getTarget(state, player, b));\n    if (result.some(r => blocked.includes(r))) {\n      return false;\n    }\n    return true;\n  }\n\n}\n"]}