{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/cards/deck-analyser.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/cards/deck-analyser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Card } from '../store/card/card';\nimport { CardManager } from './card-manager';\nimport { EnergyCard } from '../store/card/energy-card';\nimport { EnergyType, Stage, CardType, CardTag } from '../store/card/card-types';\nimport { PokemonCard } from '../store/card/pokemon-card';\n\nexport class DeckAnalyser {\n\n  private cards: Card[];\n\n  constructor(public cardNames: string[] = []) {\n    const cardManager = CardManager.getInstance();\n    this.cards = [];\n\n    cardNames.forEach(name => {\n      const card = cardManager.getCardByName(name);\n      if (card !== undefined) {\n        this.cards.push(card);\n      }\n    });\n  }\n\n  public isValid(): boolean {\n    const countMap: { [name: string]: number } = { };\n    let hasBasicPokemon: boolean = false;\n    let hasAceSpec: boolean = false;\n\n    if (this.cards.length !== 60) {\n      return false;\n    }\n\n    for (let i = 0; i < this.cards.length; i++) {\n      const card = this.cards[i];\n\n      // Check if deck has a basic Pokemon card\n      if (card instanceof PokemonCard && card.stage === Stage.BASIC) {\n        hasBasicPokemon = true;\n      }\n\n      // Count cards, except basic energies\n      if (!(card instanceof EnergyCard) || card.energyType !== EnergyType.BASIC) {\n        countMap[card.name] = (countMap[card.name] || 0) + 1;\n        if (countMap[card.name] > 4) {\n          return false;\n        }\n      }\n\n      if (card.tags.includes(CardTag.ACE_SPEC)) {\n        if (hasAceSpec) {\n          return false;\n        }\n        hasAceSpec = true;\n      }\n    }\n\n    return hasBasicPokemon;\n  }\n\n  public getDeckType(): CardType[] {\n    const cardTypes: CardType[] = [];\n\n    for (let i = 0; i < this.cards.length; i++) {\n      const card = this.cards[i];\n      let cardType = CardType.NONE;\n\n      if (card instanceof PokemonCard) {\n        cardType = card.cardType;\n        if (cardType !== CardType.NONE && cardTypes.indexOf(cardType) === -1) {\n          cardTypes.push(cardType);\n        }\n      } else if (card instanceof EnergyCard) {\n        for (let j = 0; j < card.provides.length; j++) {\n          cardType = card.provides[j];\n          if (cardType !== CardType.NONE && cardTypes.indexOf(cardType) === -1) {\n            cardTypes.push(cardType);\n          }\n        }\n      }\n    }\n\n    return cardTypes;\n  }\n\n}\n"]}