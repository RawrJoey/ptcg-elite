{"version":3,"file":"/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/state/player.ts","sources":["/Users/joemyerscough/Documents/GitHub/ptcg-epsd/ptcg-server/src/game/store/state/player.ts"],"names":[],"mappings":";;;AAAA,2CAAuC;AACvC,kEAA+E;AAE/E,2DAAsD;AACtD,+CAAuC;AAEvC,MAAa,MAAM;IAAnB;QAEE,OAAE,GAAW,CAAC,CAAC;QAEf,SAAI,GAAW,EAAE,CAAC;QAElB,SAAI,GAAa,IAAI,oBAAQ,EAAE,CAAC;QAEhC,SAAI,GAAa,IAAI,oBAAQ,EAAE,CAAC;QAEhC,YAAO,GAAa,IAAI,oBAAQ,EAAE,CAAC;QAEnC,YAAO,GAAa,IAAI,oBAAQ,EAAE,CAAC;QAEnC,cAAS,GAAa,IAAI,oBAAQ,EAAE,CAAC;QAErC,WAAM,GAAoB,IAAI,mCAAe,EAAE,CAAC;QAEhD,UAAK,GAAsB,EAAE,CAAC;QAE9B,WAAM,GAAe,EAAE,CAAC;QAExB,kBAAa,GAAW,CAAC,CAAC;QAE1B,qBAAgB,GAAW,CAAC,CAAC;QAE7B,sBAAiB,GAAW,CAAC,CAAC;QAE9B,oBAAe,GAAW,CAAC,CAAC;QAE5B,WAAM,GAAG,IAAI,oBAAM,EAAE,CAAC;QAEtB,eAAU,GAAW,EAAE,CAAC;IAqC1B,CAAC;IAnCC,YAAY;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,cAAc,CACZ,MAAkB,EAClB,OAA0F;QAE1F,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QAC/C,IAAI,MAAkB,CAAC;QAEvB,IAAI,WAAW,KAAK,SAAS,EAAE;YAC7B,MAAM,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,2BAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;YACrD,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;SAC3C;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;YAC7C,IAAI,WAAW,KAAK,SAAS,EAAE;gBAC7B,MAAM,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,2BAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;gBACpD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;aAC7C;SACF;IACH,CAAC;IAED,aAAa,CAAC,MAAuB;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9C,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;YACrB,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;YACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACrC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;SAC/B;IACH,CAAC;CAEF;AArED,wBAqEC","sourcesContent":["import { CardList } from './card-list';\nimport { CardTarget, PlayerType, SlotType } from '../actions/play-card-action';\nimport { PokemonCard } from '../card/pokemon-card';\nimport { PokemonCardList } from './pokemon-card-list';\nimport { Marker } from './card-marker';\n\nexport class Player {\n\n  id: number = 0;\n\n  name: string = '';\n\n  deck: CardList = new CardList();\n\n  hand: CardList = new CardList();\n\n  discard: CardList = new CardList();\n\n  stadium: CardList = new CardList();\n\n  supporter: CardList = new CardList();\n\n  active: PokemonCardList = new PokemonCardList();\n\n  bench: PokemonCardList[] = [];\n\n  prizes: CardList[] = [];\n\n  retreatedTurn: number = 0;\n\n  energyPlayedTurn: number = 0;\n  \n  stadiumPlayedTurn: number = 0;\n\n  stadiumUsedTurn: number = 0;\n\n  marker = new Marker();\n\n  avatarName: string = '';\n\n  getPrizeLeft(): number {\n    return this.prizes.reduce((left, p) => left + p.cards.length, 0);\n  }\n\n  forEachPokemon(\n    player: PlayerType,\n    handler: (cardList: PokemonCardList, pokemonCard: PokemonCard, target: CardTarget) => void\n  ): void {\n    let pokemonCard = this.active.getPokemonCard();\n    let target: CardTarget;\n\n    if (pokemonCard !== undefined) {\n      target = { player, slot: SlotType.ACTIVE, index: 0 };\n      handler(this.active, pokemonCard, target);\n    }\n\n    for (let i = 0; i < this.bench.length; i++) {\n      pokemonCard = this.bench[i].getPokemonCard();\n      if (pokemonCard !== undefined) {\n        target = { player, slot: SlotType.BENCH, index: i };\n        handler(this.bench[i], pokemonCard, target);\n      }\n    }\n  }\n\n  switchPokemon(target: PokemonCardList) {\n    const benchIndex = this.bench.indexOf(target);\n    if (benchIndex !== -1) {\n      this.active.clearEffects();\n      const temp = this.active;\n      this.active = this.bench[benchIndex];\n      this.bench[benchIndex] = temp;\n    }\n  }\n\n}\n"]}